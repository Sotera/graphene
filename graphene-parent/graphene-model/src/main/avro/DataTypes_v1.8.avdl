/**
 * Copyright (c) 2013 Oculus Info Inc. 
 * http://www.oculusinfo.com/
 * 
 * Released under the MIT License.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:

 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
@namespace("graphene.model.idl")

protocol G_DataTypes {
	/**
	 * A set of canonical types/tags for visual pages (T5 page classes). This is
	 * mostly for helping with menu selection, menu organization and styling with
	 * css or icons.
	 * 
	 * Later on, a user might be able to search for a particular type of visual
	 * display, and we would show a list of pages that support that display.
	 * 
	 * Might be changed to G_VisualTag, so that annotations can suggest multiple per
	 * page/component.
	 * 
	 * 
	 * HIDDEN will cause a page to not be displayed in automatically generated
	 * menus.
	 * 
	 * @author djue
	 * 
	 */
	enum G_VisualType {
	HELP, 
	TOP, 
	CHART, 
	DEFAULT, 
	GRAPH, 
	HIDDEN, 
	IMAGE, 
	INFINITE_SCROLL, 
	LIST, 
	MONEY, 
	PLUGIN, 
	SEARCH, 
	TEXT, 
	WEBGL, 
	EVENT, 
	META, 
	DEMO, 
	REDACTED, 
	GEO, 
	EXPERIMENTAL, 
	SETTINGS, 
	MANAGE_WORKSPACES, 
	ADMIN, 
	VIEW_WORKSPACE
	}

	/**
	 Tags are defined by the application layer as a taxonomy of user and application concepts,
	 independent of the data sources. This allows application semantics to be re-used with new
	 data, with a minimum of new software design and development. Data layer entity types, link
	 types and properties should be mapped into the list of tags. The application layer must be
	 able to search by native field name or by tag interchangeably, and properties returned must
	 contain both native field names as well as tags.
	 
	 The list of tags may change as application features evolve, though that will require
	 collaboration with the data layer providers. Evolving the tag list should not change the
	 Data Access or Search APIs.

	 This is the current list of tags for Properties:
	 
	 CHANGED in 1.5:
	   - CREDIT/DEBIT changed to INFLOWING/OUTFLOWING
	   - added USD
	   - added DURATION
	   
	 CHANGED in 1.6:
	   - added ENTITY_TYPE
	   - added ACCOUNT_OWNER, CLUSTER_SUMMARY, COUNTRY_CODE
	   
	 CHANGED in 1.7:
	   - added CLUSTER
	   
	 */
	enum G_PropertyTag {
		ID, 		 	// Underlying identifier in data set (not necessary a UID)	
		TYPE,		 	// Data set specific account type (e.g. in Kiva: Lender, Borrower, Partner, etc).
					 	// Shown to the user for context, and used in segmentation and clustering of data.
		ENTITY_TYPE, 	// Data set specific entity type (e.g. person, organisation). 		 
		ACCOUNT_OWNER,	// The account owner for an entity
		CLUSTER_SUMMARY,// The associated cluster summary for an entity
		CLUSTER,		// The cluster an entity belongs to
		NAME,		 	// A name, often also used in the label.
		LABEL,		 	// A text label suitable for displaying to a user.
		STAT,		 	// A text label containing aggregate or statistical summaries of numeric data.
		TEXT,		 	// Comment or other arbitrarily long text field
		STATUS,		 	// Status indication in the form of a text field
		ANNOTATION,	 	// A generic annotation in the form of a text field
		WARNING,	 	// Warning annotation in the form of a text field
		LINKED_DATA, 	// A LinkedData resource, with URL and a MIME type
		IMAGE,		 	// A LinkedData image that could be embedded in the app (e.g. person's picture, corporate logo, etc).
		GEO,		 	// A GeoData object 
		COUNTRY_CODE,	// An ISO 3 digit country code
		DATE,		 	// Date in Long format
		AMOUNT,		 	// Financial amount (any currency)
		INFLOWING,	 	// Amount flowing in (incoming messages, credits, etc)
		OUTFLOWING,	 	// Amount flowing out (outgoing messages, debits, etc)
		COUNT,		 	// When returned an aggregated Link (see below), this is the number of records.
		SERIES,		 	// Timeseries or other series data suitable for building charts
		CONSTRUCTED, 	// This property was not in the original data, but was constructed by algorithms.
				     	// See Provenance and/or Uncertainty fields for more information.
		RAW,	 	 	// This property was present in the original data. See Provenance for more information.
		USD,		 	// flags an amount as being USD (for formatting purposes),
		DURATION	 	// An G_Duration object
	}

	/**
	 This is the current list of tags for Entities:
	 
	 CHANGED in 1.6:
	   - added ACCOUNT_OWNER, CLUSTER_SUMMARY
	  
	 */
	enum G_EntityTag {
		ACCOUNT_OWNER,		// an owner of accounts
		ACCOUNT,			// a financial/communications/social account (regardless of owner: person, corporate, shared or otherwise)
		GROUP, 				// a social group
		CLUSTER,			// group of entities (system-generated)
		CLUSTER_SUMMARY,	// summarizes a group of entities (does not allow drill-down to group members)
		FILE,				// group of entities (user-created) e.g. in the sense of a "case file"
		ANONYMOUS,			// This entity does not have a globally unique ID, and represents only a class of underlying data.
							// The ID contains only sufficient information to perform searches, not to retrieve exact matches.
							// For example, in Kiva, a Borrower has no UID, but is represented as a FirstName&LastName&Gender
							// query in the Loans table.
		PROMPT_FOR_DETAILS,	// Should prompt before showing full details
		OTHER
	}

	/**
	 This is the current list of tags for Links:
	 */
	enum G_LinkTag {
		FINANCIAL,
		SOCIAL,
		COMMUNICATION,
		OTHER
	}
	
	/**
	 Allowed types for Property values.

	 CHANGED in 1.5
	 */
	enum G_PropertyType {
		DOUBLE,		// double precision floating-point
		LONG,		// 64-bit signed integer
		BOOLEAN,	// true or false
		STRING,		// UTF-8 Unicode string
		DATE, 		// Long, representing the number of milliseconds since 1 January 1970 00:00:00 UTC
		GEO,		// GeoData
		OTHER
	}
	
	/**
	 This is a placeholder for future modeling of provenance. It is not a required field in any service calls.
	 */
	record G_Provenance {
		/** Placeholder for now. Express provenance as a single URI. */
		string uri;
	}
	
	/**
	 This is a placeholder for future modeling of uncertainty. It is not a required field in any service calls.
	
	CHANGED IN 1.6
	 */
	record G_Uncertainty {
		/** Placeholder for now. Express original source confidence as a single number from 0 to 1. */
		double confidence = 1;
		
		/** Placeholder for now. Express confidence in currency of data as a single number from 0 to 1. */
		double currency = 1; // ADDED IN 1.6
	}
	
	/**
	 A URL and MIME type representing a pointer to text, image or other external resource.
	 */
	record G_LinkedData {
		/** URL of the resource */
		string url;
		
		/** MIME type of the resource */
		union {null, string} mimeType = null;		// CHANGED IN 1.8
		
		/** description of the linked resource (suitable for display to the user in an hypertext link) */
		union {null, string} title = null;			// CHANGED IN 1.8
	}
	
	/**
	 Structured representation of geo-spatial data.
	 */
	record G_GeoData {
		/** an address or other place reference; unstructured text field */
		union {null, string} text = null;			// CHANGED IN 1.8
		
		/** latitude */
		union {double, null} lat = null;
		
		/** longitude */
		union {double, null} lon = null;
		
		/** ISO 3 digit country code */
		union {null, string} cc = null;				// CHANGED IN 1.8
	}

	/**
	 Standard two letter continent code
	  
	 ADDED IN 1.6
	 */
	enum G_ContinentCode {
		AF, // Africa
		AS, // Asia
		EU, // Europe
		NA, // North America
		SA, // South America
		OC, // Oceania
		AN  // Antarctica
	}
	
	/**
	 Structured representation of country data, which includes geo-spatial data.
	  
	 ADDED IN 1.6
	 */
	record G_Country {
	
		/** country geo data, including the name as text */
		G_GeoData country;
		
		/** the name of the global region to which the country belongs; any common classification here is acceptable */
		string region;

		/** continent */
		G_ContinentCode continent;
	}
	
	/**
	 Temporal resolution of a duration
	 
	 CHANGED IN 1.5
	 */
	enum G_DateInterval {
		SECONDS, // ADDED IN 1.5
		HOURS,   // ADDED IN 1.5
		DAYS,
		WEEKS,
		MONTHS,
		QUARTERS,
		YEARS
	}
	
	/**
	 A temporal duration
	 
	 ADDED IN 1.5
	 */
	record G_Duration {
		/** time aggregation level, e.g. use monthly data */
		G_DateInterval interval;
		
		/** number of intervals, e.g. 12 monthly intervals is a 1 year duration */
		long numIntervals;
	}

	/**
	 Describes a date range at a specific resolution.
	 
	 CHANGED IN 1.5
	 */
	record G_DateRange {
		long startDate;
		
		/** number of bins to return, e.g. 12 monthly bins for 1 year of data */
		long numBins;
		
		/** number of intervals in a bin, e.g. 2 months/bin in 12 bins for 2 years of data */
		G_Duration durationPerBin;  // CHANGED IN 1.5
	}

	/**
	 Allowed types for Ranges of values.
	
	CHANGED IN 1.6
	 */
	enum G_RangeType {
		SINGLETON,
		LIST,
		BOUNDED,
		DISTRIBUTION // ADDED IN 1.6
	}

	/** 
	Single value
	
	ADDED IN 1.5
	*/
	record G_SingletonRange {
		union {string, int, float, double, long, boolean, G_GeoData} value;
		
		/** One of DOUBLE, LONG, BOOLEAN, STRING, DATE, GEO, OTHER */
		G_PropertyType type;
	}

	/** 
	List of values
	
	ADDED IN 1.5
	*/
	record G_ListRange {
		array<union {string, int, float, double, long, boolean, G_GeoData}> values;
		
		/** One of DOUBLE, LONG, BOOLEAN, STRING, DATE, GEO, OTHER */
		G_PropertyType type;
	}
	
	/** 
	Bounded or unbounded range values
	
	ADDED IN 1.5
	*/
	record G_BoundedRange {
		/** start of range, or null if unbounded start */
		union {string, int, float, double, long, boolean, G_GeoData, null} start;
		
		/** end of range, or null if unbounded start */
		union {string, int, float, double, long, boolean, G_GeoData, null} end;
		
		/** If true, range includes specified endpoint. If false, range is exclusive. */
		boolean inclusive;
		
		/** One of DOUBLE, LONG, BOOLEAN, STRING, DATE, GEO, OTHER */
		G_PropertyType type;
	}
	
	/**
	A frequency or probability element of a distribution.
	 
	ADDED IN 1.6
	*/
	record G_Frequency {
		/** the value range which occurs with some specified frequency */
		union {string, int, float, double, long, boolean, G_GeoData, G_ListRange, G_BoundedRange} range;
		
		/** frequency as a count, or probability as a value from 0-1. */
		double frequency;
	}

	/**
	Describes a distribution of values. 
	 
	ADDED IN 1.6
	*/
	record G_DistributionRange {
		array<G_Frequency> distribution;

		/** Describes how the values in the distribution are summarised */	
		G_RangeType rangeType;
		
		/** The type of value that the distribution describes. One of DOUBLE, LONG, BOOLEAN, STRING, DATE, GEO, OTHER */
		G_PropertyType type;
		
		/** True if a probability distribution, false if a frequency distribution */
		boolean isProbability = false;
	}
		
	/**
	 Each property on an Entity or Link is a name-value pair, with data type information, as well as optional
	 provenance. Tags provide a way for the data provider to associate semantic annotations to each property
	 in terms of the semantics of the application.  
	 
	 CHANGED IN 1.6
	 */
	record G_Property {
		/** the field name in the underlying data source */
		string key;
		
		/** user-friendly short-text for key (displayable) */
		union {null, string} friendlyText = null;			// CHANGED IN 1.8
		
		union {null, string} styleType = null;  //added in Graphene 4.1.2
		/** range of values */
		G_SingletonRange singletonRange = null;  //ADDED IN 1.9
		G_ListRange listRange = null;  //ADDED IN 1.9
		G_BoundedRange boundedRange = null;  //ADDED IN 1.9
		G_DistributionRange distributionRange = null;  //ADDED IN 1.9
		
		union {G_Provenance, null} provenance = null;
		
		union {G_Uncertainty, null} uncertainty = null;
		
		/** one or more tags from the Tag list, used to map this source-specific field into the semantics of applications */
		array<G_PropertyTag> tags;
	}

	/**
	 The nodes in the social, financial, communications or other graphs. May represent concrete individuals or organizations,
	 specific proxies such as accounts, or the implicit individuals or groups behind those other entities.
	 */
	record G_Entity {
		/** This uid must represent either (1) a globally unique identifier that can be used to retrieve data for an
			explicit entity, or (2) encoded query information that can be used to find a set of associated record
			notionally representing an implicit entity (e.g. Loans&FirstName&LastName&Gender). Must not be used for
			IDs that aren't globally unique.  For example, in Kiva, "Lenders" has a UID ("L12345") while "Borrowers"
			have an encoded search in the Loans table for uid ("B{loan:23456;name=Daniel}").  The encoded information
			is data layer-specific, may be different from entity to entity or data set to data set, and should be
			considered opaque to the consumers of the entities.  Entities of type 2 should always have the Entity Tag
			ANONYMOUS to help distinguish them when required. */
		string uid;
		
		/** Entity Tags (see above, e.g. "ACCOUNT") */
		array<G_EntityTag> tags;
		
		union {G_Provenance, null} provenance = null;
		
		union {G_Uncertainty, null} uncertainty = null;
		
		map<G_Property> properties;
	}

	/**
	 * The links in the social, financial, communications or other graphs. May represent communication events, financial transactions
	 * or social connections.
	 */
	record G_Link {
		/** Link Tags (see above, e.g. "FINANCIAL") */
		array<G_LinkTag> tags;
		
		/** source entity uid */
		union {null, string} source = null;				// CHANGED IN 1.8
		
		/** target entity uid */
		union {null, string} target = null;				// CHANGED IN 1.8
		
		/** true if directed, false if undirected */
		boolean directed = true;
		
		union {G_Provenance, null} provenance = null;
		
		union {G_Uncertainty, null} uncertainty = null;
		
		map<G_Property> properties;
	}
	
	/**
	 Cluster of nodes in the social, financial, communications or other graphs. 
	 
	 CHANGED in 1.7:
	    - added version
	 */
	record G_Cluster {
		/** A unique identifier use to retrieve data about this cluster. Should not be used for non-global identifiers. */
		string uid;
		
		/** Entity Tags (see DataTypes, e.g. "CLUSTER") */
		array<G_EntityTag> tags;
		
		union {G_Provenance, null} provenance = null;
		
		union {G_Uncertainty, null} uncertainty = null;
		
		array<G_Property> properties;
		
		/** List of id's of the members of this cluster */
		array<string> members;
		
		/** List of id's of the subclusters of this cluster - empty if this is a leaf cluster in cluster hierarchy */
		array<string> subclusters;
		
		/** The id of the parent cluster if this is a cluster in a hierarchy - Can be null if this is a root cluster **/
		union {null, string} parent = null;				// CHANGED IN 1.8
		
		/** The id of the root cluster (top level cluster) if this is a cluster in a hierarchy - Can be null if this is a root cluster **/
		union {null, string} root = null;				// CHANGED IN 1.8
		
		/** The degree from the root this cluster is in the hierarchy - level = 0 if this is a root cluster **/
		int level = 0;
		
		/** The version number of the cluster - each time the cluster contents is modified the version should be incremented **/
		int version = 1;
	}
	
	/**
	 Represents the future results of an asyncrhonous task.
	 Can be passed into the FutureResults service API
	 */
	record G_Future {
		/** unique id of this task */
		string uid;
		
		/** short human-readable description of task for display */
		string label;
		
		/** uid of the service task is running on */
		union {null, string} service = null;			// CHANGED IN 1.8
		
		/** date/time task was started */
		long started;
		
		/** date/time task was completed (negative if not completed yet) */
		long completed = -1;
	}

	/**
	 Selectable services, returned by getServices() in various APIs
	 */
	record G_Service {
		/** unique id of this service */
		string uid;
		
		/** short human-readable description of service for display */
		string label;
	}
}
