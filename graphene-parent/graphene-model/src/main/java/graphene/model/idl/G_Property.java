/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package graphene.model.idl;  
@SuppressWarnings("all")
/** Each property on an Entity or Link is a name-value pair, with data type information, as well as optional
	 provenance. Tags provide a way for the data provider to associate semantic annotations to each property
	 in terms of the semantics of the application.  
	 
	 CHANGED IN 1.6 */
@org.apache.avro.specific.AvroGenerated
public class G_Property extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"G_Property\",\"namespace\":\"graphene.model.idl\",\"doc\":\"Each property on an Entity or Link is a name-value pair, with data type information, as well as optional\\n\\t provenance. Tags provide a way for the data provider to associate semantic annotations to each property\\n\\t in terms of the semantics of the application.  \\n\\t \\n\\t CHANGED IN 1.6\",\"fields\":[{\"name\":\"key\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"the field name in the underlying data source\"},{\"name\":\"friendlyText\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"user-friendly short-text for key (displayable)\",\"default\":null},{\"name\":\"styleType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"singletonRange\",\"type\":{\"type\":\"record\",\"name\":\"G_SingletonRange\",\"doc\":\"Single value\\n\\t\\n\\tADDED IN 1.5\",\"fields\":[{\"name\":\"value\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"int\",\"float\",\"double\",\"long\",\"boolean\",{\"type\":\"record\",\"name\":\"G_GeoData\",\"doc\":\"Structured representation of geo-spatial data.\",\"fields\":[{\"name\":\"text\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"an address or other place reference; unstructured text field\",\"default\":null},{\"name\":\"lat\",\"type\":[\"double\",\"null\"],\"doc\":\"latitude\",\"default\":null},{\"name\":\"lon\",\"type\":[\"double\",\"null\"],\"doc\":\"longitude\",\"default\":null},{\"name\":\"cc\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"ISO 3 digit country code\",\"default\":null}]}]},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"G_PropertyType\",\"doc\":\"Allowed types for Property values.\\n\\n\\t CHANGED in 1.5\",\"symbols\":[\"DOUBLE\",\"LONG\",\"BOOLEAN\",\"STRING\",\"DATE\",\"GEO\",\"OTHER\"]},\"doc\":\"One of DOUBLE, LONG, BOOLEAN, STRING, DATE, GEO, OTHER\"}]},\"doc\":\"range of values\",\"default\":null},{\"name\":\"listRange\",\"type\":{\"type\":\"record\",\"name\":\"G_ListRange\",\"doc\":\"List of values\\n\\t\\n\\tADDED IN 1.5\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"int\",\"float\",\"double\",\"long\",\"boolean\",\"G_GeoData\"]}},{\"name\":\"type\",\"type\":\"G_PropertyType\",\"doc\":\"One of DOUBLE, LONG, BOOLEAN, STRING, DATE, GEO, OTHER\"}]},\"default\":null},{\"name\":\"boundedRange\",\"type\":{\"type\":\"record\",\"name\":\"G_BoundedRange\",\"doc\":\"Bounded or unbounded range values\\n\\t\\n\\tADDED IN 1.5\",\"fields\":[{\"name\":\"start\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"int\",\"float\",\"double\",\"long\",\"boolean\",\"G_GeoData\",\"null\"],\"doc\":\"start of range, or null if unbounded start\"},{\"name\":\"end\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"int\",\"float\",\"double\",\"long\",\"boolean\",\"G_GeoData\",\"null\"],\"doc\":\"end of range, or null if unbounded start\"},{\"name\":\"inclusive\",\"type\":\"boolean\",\"doc\":\"If true, range includes specified endpoint. If false, range is exclusive.\"},{\"name\":\"type\",\"type\":\"G_PropertyType\",\"doc\":\"One of DOUBLE, LONG, BOOLEAN, STRING, DATE, GEO, OTHER\"}]},\"default\":null},{\"name\":\"distributionRange\",\"type\":{\"type\":\"record\",\"name\":\"G_DistributionRange\",\"doc\":\"Describes a distribution of values. \\n\\t \\n\\tADDED IN 1.6\",\"fields\":[{\"name\":\"distribution\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"G_Frequency\",\"doc\":\"A frequency or probability element of a distribution.\\n\\t \\n\\tADDED IN 1.6\",\"fields\":[{\"name\":\"range\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"int\",\"float\",\"double\",\"long\",\"boolean\",\"G_GeoData\",\"G_ListRange\",\"G_BoundedRange\"],\"doc\":\"the value range which occurs with some specified frequency\"},{\"name\":\"frequency\",\"type\":\"double\",\"doc\":\"frequency as a count, or probability as a value from 0-1.\"}]}}},{\"name\":\"rangeType\",\"type\":{\"type\":\"enum\",\"name\":\"G_RangeType\",\"doc\":\"Allowed types for Ranges of values.\\n\\t\\n\\tCHANGED IN 1.6\",\"symbols\":[\"SINGLETON\",\"LIST\",\"BOUNDED\",\"DISTRIBUTION\"]},\"doc\":\"Describes how the values in the distribution are summarised\"},{\"name\":\"type\",\"type\":\"G_PropertyType\",\"doc\":\"The type of value that the distribution describes. One of DOUBLE, LONG, BOOLEAN, STRING, DATE, GEO, OTHER\"},{\"name\":\"isProbability\",\"type\":\"boolean\",\"doc\":\"True if a probability distribution, false if a frequency distribution\",\"default\":false}]},\"default\":null},{\"name\":\"provenance\",\"type\":[{\"type\":\"record\",\"name\":\"G_Provenance\",\"doc\":\"This is a placeholder for future modeling of provenance. It is not a required field in any service calls.\",\"fields\":[{\"name\":\"uri\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Placeholder for now. Express provenance as a single URI.\"}]},\"null\"],\"default\":null},{\"name\":\"uncertainty\",\"type\":[{\"type\":\"record\",\"name\":\"G_Uncertainty\",\"doc\":\"This is a placeholder for future modeling of uncertainty. It is not a required field in any service calls.\\n\\t\\n\\tCHANGED IN 1.6\",\"fields\":[{\"name\":\"confidence\",\"type\":\"double\",\"doc\":\"Placeholder for now. Express original source confidence as a single number from 0 to 1.\",\"default\":1},{\"name\":\"currency\",\"type\":\"double\",\"doc\":\"Placeholder for now. Express confidence in currency of data as a single number from 0 to 1.\",\"default\":1}]},\"null\"],\"default\":null},{\"name\":\"tags\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"enum\",\"name\":\"G_PropertyTag\",\"doc\":\"Tags are defined by the application layer as a taxonomy of user and application concepts,\\n\\t independent of the data sources. This allows application semantics to be re-used with new\\n\\t data, with a minimum of new software design and development. Data layer entity types, link\\n\\t types and properties should be mapped into the list of tags. The application layer must be\\n\\t able to search by native field name or by tag interchangeably, and properties returned must\\n\\t contain both native field names as well as tags.\\n\\t \\n\\t The list of tags may change as application features evolve, though that will require\\n\\t collaboration with the data layer providers. Evolving the tag list should not change the\\n\\t Data Access or Search APIs.\\n\\n\\t This is the current list of tags for Properties:\\n\\t \\n\\t CHANGED in 1.5:\\n\\t   - CREDIT/DEBIT changed to INFLOWING/OUTFLOWING\\n\\t   - added USD\\n\\t   - added DURATION\\n\\t   \\n\\t CHANGED in 1.6:\\n\\t   - added ENTITY_TYPE\\n\\t   - added ACCOUNT_OWNER, CLUSTER_SUMMARY, COUNTRY_CODE\\n\\t   \\n\\t CHANGED in 1.7:\\n\\t   - added CLUSTER\",\"symbols\":[\"ID\",\"TYPE\",\"ENTITY_TYPE\",\"ACCOUNT_OWNER\",\"CLUSTER_SUMMARY\",\"CLUSTER\",\"NAME\",\"LABEL\",\"STAT\",\"TEXT\",\"STATUS\",\"ANNOTATION\",\"WARNING\",\"LINKED_DATA\",\"IMAGE\",\"GEO\",\"COUNTRY_CODE\",\"DATE\",\"AMOUNT\",\"INFLOWING\",\"OUTFLOWING\",\"COUNT\",\"SERIES\",\"CONSTRUCTED\",\"RAW\",\"USD\",\"DURATION\"]}},\"doc\":\"one or more tags from the Tag list, used to map this source-specific field into the semantics of applications\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** the field name in the underlying data source */
   private java.lang.String key;
  /** user-friendly short-text for key (displayable) */
   private java.lang.String friendlyText;
   private java.lang.String styleType;
  /** range of values */
   private graphene.model.idl.G_SingletonRange singletonRange;
   private graphene.model.idl.G_ListRange listRange;
   private graphene.model.idl.G_BoundedRange boundedRange;
   private graphene.model.idl.G_DistributionRange distributionRange;
   private graphene.model.idl.G_Provenance provenance;
   private graphene.model.idl.G_Uncertainty uncertainty;
  /** one or more tags from the Tag list, used to map this source-specific field into the semantics of applications */
   private java.util.List<graphene.model.idl.G_PropertyTag> tags;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public G_Property() {}

  /**
   * All-args constructor.
   */
  public G_Property(java.lang.String key, java.lang.String friendlyText, java.lang.String styleType, graphene.model.idl.G_SingletonRange singletonRange, graphene.model.idl.G_ListRange listRange, graphene.model.idl.G_BoundedRange boundedRange, graphene.model.idl.G_DistributionRange distributionRange, graphene.model.idl.G_Provenance provenance, graphene.model.idl.G_Uncertainty uncertainty, java.util.List<graphene.model.idl.G_PropertyTag> tags) {
    this.key = key;
    this.friendlyText = friendlyText;
    this.styleType = styleType;
    this.singletonRange = singletonRange;
    this.listRange = listRange;
    this.boundedRange = boundedRange;
    this.distributionRange = distributionRange;
    this.provenance = provenance;
    this.uncertainty = uncertainty;
    this.tags = tags;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return key;
    case 1: return friendlyText;
    case 2: return styleType;
    case 3: return singletonRange;
    case 4: return listRange;
    case 5: return boundedRange;
    case 6: return distributionRange;
    case 7: return provenance;
    case 8: return uncertainty;
    case 9: return tags;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: key = (java.lang.String)value$; break;
    case 1: friendlyText = (java.lang.String)value$; break;
    case 2: styleType = (java.lang.String)value$; break;
    case 3: singletonRange = (graphene.model.idl.G_SingletonRange)value$; break;
    case 4: listRange = (graphene.model.idl.G_ListRange)value$; break;
    case 5: boundedRange = (graphene.model.idl.G_BoundedRange)value$; break;
    case 6: distributionRange = (graphene.model.idl.G_DistributionRange)value$; break;
    case 7: provenance = (graphene.model.idl.G_Provenance)value$; break;
    case 8: uncertainty = (graphene.model.idl.G_Uncertainty)value$; break;
    case 9: tags = (java.util.List<graphene.model.idl.G_PropertyTag>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'key' field.
   * the field name in the underlying data source   */
  public java.lang.String getKey() {
    return key;
  }

  /**
   * Sets the value of the 'key' field.
   * the field name in the underlying data source   * @param value the value to set.
   */
  public void setKey(java.lang.String value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'friendlyText' field.
   * user-friendly short-text for key (displayable)   */
  public java.lang.String getFriendlyText() {
    return friendlyText;
  }

  /**
   * Sets the value of the 'friendlyText' field.
   * user-friendly short-text for key (displayable)   * @param value the value to set.
   */
  public void setFriendlyText(java.lang.String value) {
    this.friendlyText = value;
  }

  /**
   * Gets the value of the 'styleType' field.
   */
  public java.lang.String getStyleType() {
    return styleType;
  }

  /**
   * Sets the value of the 'styleType' field.
   * @param value the value to set.
   */
  public void setStyleType(java.lang.String value) {
    this.styleType = value;
  }

  /**
   * Gets the value of the 'singletonRange' field.
   * range of values   */
  public graphene.model.idl.G_SingletonRange getSingletonRange() {
    return singletonRange;
  }

  /**
   * Sets the value of the 'singletonRange' field.
   * range of values   * @param value the value to set.
   */
  public void setSingletonRange(graphene.model.idl.G_SingletonRange value) {
    this.singletonRange = value;
  }

  /**
   * Gets the value of the 'listRange' field.
   */
  public graphene.model.idl.G_ListRange getListRange() {
    return listRange;
  }

  /**
   * Sets the value of the 'listRange' field.
   * @param value the value to set.
   */
  public void setListRange(graphene.model.idl.G_ListRange value) {
    this.listRange = value;
  }

  /**
   * Gets the value of the 'boundedRange' field.
   */
  public graphene.model.idl.G_BoundedRange getBoundedRange() {
    return boundedRange;
  }

  /**
   * Sets the value of the 'boundedRange' field.
   * @param value the value to set.
   */
  public void setBoundedRange(graphene.model.idl.G_BoundedRange value) {
    this.boundedRange = value;
  }

  /**
   * Gets the value of the 'distributionRange' field.
   */
  public graphene.model.idl.G_DistributionRange getDistributionRange() {
    return distributionRange;
  }

  /**
   * Sets the value of the 'distributionRange' field.
   * @param value the value to set.
   */
  public void setDistributionRange(graphene.model.idl.G_DistributionRange value) {
    this.distributionRange = value;
  }

  /**
   * Gets the value of the 'provenance' field.
   */
  public graphene.model.idl.G_Provenance getProvenance() {
    return provenance;
  }

  /**
   * Sets the value of the 'provenance' field.
   * @param value the value to set.
   */
  public void setProvenance(graphene.model.idl.G_Provenance value) {
    this.provenance = value;
  }

  /**
   * Gets the value of the 'uncertainty' field.
   */
  public graphene.model.idl.G_Uncertainty getUncertainty() {
    return uncertainty;
  }

  /**
   * Sets the value of the 'uncertainty' field.
   * @param value the value to set.
   */
  public void setUncertainty(graphene.model.idl.G_Uncertainty value) {
    this.uncertainty = value;
  }

  /**
   * Gets the value of the 'tags' field.
   * one or more tags from the Tag list, used to map this source-specific field into the semantics of applications   */
  public java.util.List<graphene.model.idl.G_PropertyTag> getTags() {
    return tags;
  }

  /**
   * Sets the value of the 'tags' field.
   * one or more tags from the Tag list, used to map this source-specific field into the semantics of applications   * @param value the value to set.
   */
  public void setTags(java.util.List<graphene.model.idl.G_PropertyTag> value) {
    this.tags = value;
  }

  /** Creates a new G_Property RecordBuilder */
  public static graphene.model.idl.G_Property.Builder newBuilder() {
    return new graphene.model.idl.G_Property.Builder();
  }
  
  /** Creates a new G_Property RecordBuilder by copying an existing Builder */
  public static graphene.model.idl.G_Property.Builder newBuilder(graphene.model.idl.G_Property.Builder other) {
    return new graphene.model.idl.G_Property.Builder(other);
  }
  
  /** Creates a new G_Property RecordBuilder by copying an existing G_Property instance */
  public static graphene.model.idl.G_Property.Builder newBuilder(graphene.model.idl.G_Property other) {
    return new graphene.model.idl.G_Property.Builder(other);
  }
  
  /**
   * RecordBuilder for G_Property instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<G_Property>
    implements org.apache.avro.data.RecordBuilder<G_Property> {

    private java.lang.String key;
    private java.lang.String friendlyText;
    private java.lang.String styleType;
    private graphene.model.idl.G_SingletonRange singletonRange;
    private graphene.model.idl.G_ListRange listRange;
    private graphene.model.idl.G_BoundedRange boundedRange;
    private graphene.model.idl.G_DistributionRange distributionRange;
    private graphene.model.idl.G_Provenance provenance;
    private graphene.model.idl.G_Uncertainty uncertainty;
    private java.util.List<graphene.model.idl.G_PropertyTag> tags;

    /** Creates a new Builder */
    private Builder() {
      super(graphene.model.idl.G_Property.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(graphene.model.idl.G_Property.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.friendlyText)) {
        this.friendlyText = data().deepCopy(fields()[1].schema(), other.friendlyText);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.styleType)) {
        this.styleType = data().deepCopy(fields()[2].schema(), other.styleType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.singletonRange)) {
        this.singletonRange = data().deepCopy(fields()[3].schema(), other.singletonRange);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.listRange)) {
        this.listRange = data().deepCopy(fields()[4].schema(), other.listRange);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.boundedRange)) {
        this.boundedRange = data().deepCopy(fields()[5].schema(), other.boundedRange);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.distributionRange)) {
        this.distributionRange = data().deepCopy(fields()[6].schema(), other.distributionRange);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.provenance)) {
        this.provenance = data().deepCopy(fields()[7].schema(), other.provenance);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.uncertainty)) {
        this.uncertainty = data().deepCopy(fields()[8].schema(), other.uncertainty);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.tags)) {
        this.tags = data().deepCopy(fields()[9].schema(), other.tags);
        fieldSetFlags()[9] = true;
      }
    }
    
    /** Creates a Builder by copying an existing G_Property instance */
    private Builder(graphene.model.idl.G_Property other) {
            super(graphene.model.idl.G_Property.SCHEMA$);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.friendlyText)) {
        this.friendlyText = data().deepCopy(fields()[1].schema(), other.friendlyText);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.styleType)) {
        this.styleType = data().deepCopy(fields()[2].schema(), other.styleType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.singletonRange)) {
        this.singletonRange = data().deepCopy(fields()[3].schema(), other.singletonRange);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.listRange)) {
        this.listRange = data().deepCopy(fields()[4].schema(), other.listRange);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.boundedRange)) {
        this.boundedRange = data().deepCopy(fields()[5].schema(), other.boundedRange);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.distributionRange)) {
        this.distributionRange = data().deepCopy(fields()[6].schema(), other.distributionRange);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.provenance)) {
        this.provenance = data().deepCopy(fields()[7].schema(), other.provenance);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.uncertainty)) {
        this.uncertainty = data().deepCopy(fields()[8].schema(), other.uncertainty);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.tags)) {
        this.tags = data().deepCopy(fields()[9].schema(), other.tags);
        fieldSetFlags()[9] = true;
      }
    }

    /** Gets the value of the 'key' field */
    public java.lang.String getKey() {
      return key;
    }
    
    /** Sets the value of the 'key' field */
    public graphene.model.idl.G_Property.Builder setKey(java.lang.String value) {
      validate(fields()[0], value);
      this.key = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'key' field has been set */
    public boolean hasKey() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'key' field */
    public graphene.model.idl.G_Property.Builder clearKey() {
      key = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'friendlyText' field */
    public java.lang.String getFriendlyText() {
      return friendlyText;
    }
    
    /** Sets the value of the 'friendlyText' field */
    public graphene.model.idl.G_Property.Builder setFriendlyText(java.lang.String value) {
      validate(fields()[1], value);
      this.friendlyText = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'friendlyText' field has been set */
    public boolean hasFriendlyText() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'friendlyText' field */
    public graphene.model.idl.G_Property.Builder clearFriendlyText() {
      friendlyText = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'styleType' field */
    public java.lang.String getStyleType() {
      return styleType;
    }
    
    /** Sets the value of the 'styleType' field */
    public graphene.model.idl.G_Property.Builder setStyleType(java.lang.String value) {
      validate(fields()[2], value);
      this.styleType = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'styleType' field has been set */
    public boolean hasStyleType() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'styleType' field */
    public graphene.model.idl.G_Property.Builder clearStyleType() {
      styleType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'singletonRange' field */
    public graphene.model.idl.G_SingletonRange getSingletonRange() {
      return singletonRange;
    }
    
    /** Sets the value of the 'singletonRange' field */
    public graphene.model.idl.G_Property.Builder setSingletonRange(graphene.model.idl.G_SingletonRange value) {
      validate(fields()[3], value);
      this.singletonRange = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'singletonRange' field has been set */
    public boolean hasSingletonRange() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'singletonRange' field */
    public graphene.model.idl.G_Property.Builder clearSingletonRange() {
      singletonRange = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'listRange' field */
    public graphene.model.idl.G_ListRange getListRange() {
      return listRange;
    }
    
    /** Sets the value of the 'listRange' field */
    public graphene.model.idl.G_Property.Builder setListRange(graphene.model.idl.G_ListRange value) {
      validate(fields()[4], value);
      this.listRange = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'listRange' field has been set */
    public boolean hasListRange() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'listRange' field */
    public graphene.model.idl.G_Property.Builder clearListRange() {
      listRange = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'boundedRange' field */
    public graphene.model.idl.G_BoundedRange getBoundedRange() {
      return boundedRange;
    }
    
    /** Sets the value of the 'boundedRange' field */
    public graphene.model.idl.G_Property.Builder setBoundedRange(graphene.model.idl.G_BoundedRange value) {
      validate(fields()[5], value);
      this.boundedRange = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'boundedRange' field has been set */
    public boolean hasBoundedRange() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'boundedRange' field */
    public graphene.model.idl.G_Property.Builder clearBoundedRange() {
      boundedRange = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'distributionRange' field */
    public graphene.model.idl.G_DistributionRange getDistributionRange() {
      return distributionRange;
    }
    
    /** Sets the value of the 'distributionRange' field */
    public graphene.model.idl.G_Property.Builder setDistributionRange(graphene.model.idl.G_DistributionRange value) {
      validate(fields()[6], value);
      this.distributionRange = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'distributionRange' field has been set */
    public boolean hasDistributionRange() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'distributionRange' field */
    public graphene.model.idl.G_Property.Builder clearDistributionRange() {
      distributionRange = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'provenance' field */
    public graphene.model.idl.G_Provenance getProvenance() {
      return provenance;
    }
    
    /** Sets the value of the 'provenance' field */
    public graphene.model.idl.G_Property.Builder setProvenance(graphene.model.idl.G_Provenance value) {
      validate(fields()[7], value);
      this.provenance = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'provenance' field has been set */
    public boolean hasProvenance() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'provenance' field */
    public graphene.model.idl.G_Property.Builder clearProvenance() {
      provenance = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'uncertainty' field */
    public graphene.model.idl.G_Uncertainty getUncertainty() {
      return uncertainty;
    }
    
    /** Sets the value of the 'uncertainty' field */
    public graphene.model.idl.G_Property.Builder setUncertainty(graphene.model.idl.G_Uncertainty value) {
      validate(fields()[8], value);
      this.uncertainty = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'uncertainty' field has been set */
    public boolean hasUncertainty() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'uncertainty' field */
    public graphene.model.idl.G_Property.Builder clearUncertainty() {
      uncertainty = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'tags' field */
    public java.util.List<graphene.model.idl.G_PropertyTag> getTags() {
      return tags;
    }
    
    /** Sets the value of the 'tags' field */
    public graphene.model.idl.G_Property.Builder setTags(java.util.List<graphene.model.idl.G_PropertyTag> value) {
      validate(fields()[9], value);
      this.tags = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'tags' field has been set */
    public boolean hasTags() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'tags' field */
    public graphene.model.idl.G_Property.Builder clearTags() {
      tags = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    public G_Property build() {
      try {
        G_Property record = new G_Property();
        record.key = fieldSetFlags()[0] ? this.key : (java.lang.String) defaultValue(fields()[0]);
        record.friendlyText = fieldSetFlags()[1] ? this.friendlyText : (java.lang.String) defaultValue(fields()[1]);
        record.styleType = fieldSetFlags()[2] ? this.styleType : (java.lang.String) defaultValue(fields()[2]);
        record.singletonRange = fieldSetFlags()[3] ? this.singletonRange : (graphene.model.idl.G_SingletonRange) defaultValue(fields()[3]);
        record.listRange = fieldSetFlags()[4] ? this.listRange : (graphene.model.idl.G_ListRange) defaultValue(fields()[4]);
        record.boundedRange = fieldSetFlags()[5] ? this.boundedRange : (graphene.model.idl.G_BoundedRange) defaultValue(fields()[5]);
        record.distributionRange = fieldSetFlags()[6] ? this.distributionRange : (graphene.model.idl.G_DistributionRange) defaultValue(fields()[6]);
        record.provenance = fieldSetFlags()[7] ? this.provenance : (graphene.model.idl.G_Provenance) defaultValue(fields()[7]);
        record.uncertainty = fieldSetFlags()[8] ? this.uncertainty : (graphene.model.idl.G_Uncertainty) defaultValue(fields()[8]);
        record.tags = fieldSetFlags()[9] ? this.tags : (java.util.List<graphene.model.idl.G_PropertyTag>) defaultValue(fields()[9]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
