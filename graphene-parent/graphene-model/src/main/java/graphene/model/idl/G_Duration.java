/*
 *
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *       http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package graphene.model.idl;  
@SuppressWarnings("all")
/** A temporal duration
	 
	 ADDED IN 1.5 */
@org.apache.avro.specific.AvroGenerated
public class G_Duration extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"G_Duration\",\"namespace\":\"graphene.model.idl\",\"doc\":\"A temporal duration\\n\\t \\n\\t ADDED IN 1.5\",\"fields\":[{\"name\":\"interval\",\"type\":{\"type\":\"enum\",\"name\":\"G_DateInterval\",\"doc\":\"Temporal resolution of a duration\\n\\t \\n\\t CHANGED IN 1.5\",\"symbols\":[\"SECONDS\",\"HOURS\",\"DAYS\",\"WEEKS\",\"MONTHS\",\"QUARTERS\",\"YEARS\"]},\"doc\":\"time aggregation level, e.g. use monthly data\"},{\"name\":\"numIntervals\",\"type\":\"long\",\"doc\":\"number of intervals, e.g. 12 monthly intervals is a 1 year duration\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** time aggregation level, e.g. use monthly data */
   private graphene.model.idl.G_DateInterval interval;
  /** number of intervals, e.g. 12 monthly intervals is a 1 year duration */
   private long numIntervals;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public G_Duration() {}

  /**
   * All-args constructor.
   */
  public G_Duration(graphene.model.idl.G_DateInterval interval, java.lang.Long numIntervals) {
    this.interval = interval;
    this.numIntervals = numIntervals;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return interval;
    case 1: return numIntervals;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: interval = (graphene.model.idl.G_DateInterval)value$; break;
    case 1: numIntervals = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'interval' field.
   * time aggregation level, e.g. use monthly data   */
  public graphene.model.idl.G_DateInterval getInterval() {
    return interval;
  }

  /**
   * Sets the value of the 'interval' field.
   * time aggregation level, e.g. use monthly data   * @param value the value to set.
   */
  public void setInterval(graphene.model.idl.G_DateInterval value) {
    this.interval = value;
  }

  /**
   * Gets the value of the 'numIntervals' field.
   * number of intervals, e.g. 12 monthly intervals is a 1 year duration   */
  public java.lang.Long getNumIntervals() {
    return numIntervals;
  }

  /**
   * Sets the value of the 'numIntervals' field.
   * number of intervals, e.g. 12 monthly intervals is a 1 year duration   * @param value the value to set.
   */
  public void setNumIntervals(java.lang.Long value) {
    this.numIntervals = value;
  }

  /** Creates a new G_Duration RecordBuilder */
  public static graphene.model.idl.G_Duration.Builder newBuilder() {
    return new graphene.model.idl.G_Duration.Builder();
  }
  
  /** Creates a new G_Duration RecordBuilder by copying an existing Builder */
  public static graphene.model.idl.G_Duration.Builder newBuilder(graphene.model.idl.G_Duration.Builder other) {
    return new graphene.model.idl.G_Duration.Builder(other);
  }
  
  /** Creates a new G_Duration RecordBuilder by copying an existing G_Duration instance */
  public static graphene.model.idl.G_Duration.Builder newBuilder(graphene.model.idl.G_Duration other) {
    return new graphene.model.idl.G_Duration.Builder(other);
  }
  
  /**
   * RecordBuilder for G_Duration instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<G_Duration>
    implements org.apache.avro.data.RecordBuilder<G_Duration> {

    private graphene.model.idl.G_DateInterval interval;
    private long numIntervals;

    /** Creates a new Builder */
    private Builder() {
      super(graphene.model.idl.G_Duration.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(graphene.model.idl.G_Duration.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.interval)) {
        this.interval = data().deepCopy(fields()[0].schema(), other.interval);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.numIntervals)) {
        this.numIntervals = data().deepCopy(fields()[1].schema(), other.numIntervals);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing G_Duration instance */
    private Builder(graphene.model.idl.G_Duration other) {
            super(graphene.model.idl.G_Duration.SCHEMA$);
      if (isValidValue(fields()[0], other.interval)) {
        this.interval = data().deepCopy(fields()[0].schema(), other.interval);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.numIntervals)) {
        this.numIntervals = data().deepCopy(fields()[1].schema(), other.numIntervals);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'interval' field */
    public graphene.model.idl.G_DateInterval getInterval() {
      return interval;
    }
    
    /** Sets the value of the 'interval' field */
    public graphene.model.idl.G_Duration.Builder setInterval(graphene.model.idl.G_DateInterval value) {
      validate(fields()[0], value);
      this.interval = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'interval' field has been set */
    public boolean hasInterval() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'interval' field */
    public graphene.model.idl.G_Duration.Builder clearInterval() {
      interval = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'numIntervals' field */
    public java.lang.Long getNumIntervals() {
      return numIntervals;
    }
    
    /** Sets the value of the 'numIntervals' field */
    public graphene.model.idl.G_Duration.Builder setNumIntervals(long value) {
      validate(fields()[1], value);
      this.numIntervals = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'numIntervals' field has been set */
    public boolean hasNumIntervals() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'numIntervals' field */
    public graphene.model.idl.G_Duration.Builder clearNumIntervals() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public G_Duration build() {
      try {
        G_Duration record = new G_Duration();
        record.interval = fieldSetFlags()[0] ? this.interval : (graphene.model.idl.G_DateInterval) defaultValue(fields()[0]);
        record.numIntervals = fieldSetFlags()[1] ? this.numIntervals : (java.lang.Long) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
