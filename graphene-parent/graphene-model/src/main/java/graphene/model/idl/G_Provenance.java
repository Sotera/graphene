/*
 *
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *       http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package graphene.model.idl;  
@SuppressWarnings("all")
/** This is a placeholder for future modeling of provenance. It is not a required field in any service calls. */
@org.apache.avro.specific.AvroGenerated
public class G_Provenance extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"G_Provenance\",\"namespace\":\"graphene.model.idl\",\"doc\":\"This is a placeholder for future modeling of provenance. It is not a required field in any service calls.\",\"fields\":[{\"name\":\"uri\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Placeholder for now. Express provenance as a single URI.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Placeholder for now. Express provenance as a single URI. */
   private java.lang.String uri;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public G_Provenance() {}

  /**
   * All-args constructor.
   */
  public G_Provenance(java.lang.String uri) {
    this.uri = uri;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uri;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uri = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uri' field.
   * Placeholder for now. Express provenance as a single URI.   */
  public java.lang.String getUri() {
    return uri;
  }

  /**
   * Sets the value of the 'uri' field.
   * Placeholder for now. Express provenance as a single URI.   * @param value the value to set.
   */
  public void setUri(java.lang.String value) {
    this.uri = value;
  }

  /** Creates a new G_Provenance RecordBuilder */
  public static graphene.model.idl.G_Provenance.Builder newBuilder() {
    return new graphene.model.idl.G_Provenance.Builder();
  }
  
  /** Creates a new G_Provenance RecordBuilder by copying an existing Builder */
  public static graphene.model.idl.G_Provenance.Builder newBuilder(graphene.model.idl.G_Provenance.Builder other) {
    return new graphene.model.idl.G_Provenance.Builder(other);
  }
  
  /** Creates a new G_Provenance RecordBuilder by copying an existing G_Provenance instance */
  public static graphene.model.idl.G_Provenance.Builder newBuilder(graphene.model.idl.G_Provenance other) {
    return new graphene.model.idl.G_Provenance.Builder(other);
  }
  
  /**
   * RecordBuilder for G_Provenance instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<G_Provenance>
    implements org.apache.avro.data.RecordBuilder<G_Provenance> {

    private java.lang.String uri;

    /** Creates a new Builder */
    private Builder() {
      super(graphene.model.idl.G_Provenance.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(graphene.model.idl.G_Provenance.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uri)) {
        this.uri = data().deepCopy(fields()[0].schema(), other.uri);
        fieldSetFlags()[0] = true;
      }
    }
    
    /** Creates a Builder by copying an existing G_Provenance instance */
    private Builder(graphene.model.idl.G_Provenance other) {
            super(graphene.model.idl.G_Provenance.SCHEMA$);
      if (isValidValue(fields()[0], other.uri)) {
        this.uri = data().deepCopy(fields()[0].schema(), other.uri);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'uri' field */
    public java.lang.String getUri() {
      return uri;
    }
    
    /** Sets the value of the 'uri' field */
    public graphene.model.idl.G_Provenance.Builder setUri(java.lang.String value) {
      validate(fields()[0], value);
      this.uri = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'uri' field has been set */
    public boolean hasUri() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'uri' field */
    public graphene.model.idl.G_Provenance.Builder clearUri() {
      uri = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public G_Provenance build() {
      try {
        G_Provenance record = new G_Provenance();
        record.uri = fieldSetFlags()[0] ? this.uri : (java.lang.String) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
