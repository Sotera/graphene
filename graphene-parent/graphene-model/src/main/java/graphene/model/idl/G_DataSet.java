/*
 *
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *       http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package graphene.model.idl;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class G_DataSet extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"G_DataSet\",\"namespace\":\"graphene.model.idl\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"name of the dataset\"},{\"name\":\"isEntity\",\"type\":\"boolean\",\"default\":true},{\"name\":\"isTransaction\",\"type\":\"boolean\",\"default\":true},{\"name\":\"fields\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"G_DataSetField\",\"doc\":\"* A field within a DataSet, which in turn is a real or virtual table within\\r\\n\\t * a DataSource. From Non Avro version by PWG.\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"name of the field\"},{\"name\":\"friendlyName\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"doc\":\"user-friendly short-text for key (displayable)\",\"default\":null},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"G_PropertyType\",\"doc\":\"* The 21st century meaning, \\\"conceal from unauthorized\\r\\n\\t\\t\\t\\t\\t\\t * view; censor but do not destroy\\\"\",\"symbols\":[\"DOUBLE\",\"LONG\",\"BOOLEAN\",\"STRING\",\"DATE\",\"GEO\",\"IMAGE\",\"URI\",\"OTHER\",\"REDACTED\"]},\"doc\":\"One of DOUBLE, LONG, BOOLEAN, STRING, DATE, GEO, OTHER\"},{\"name\":\"sortable\",\"type\":\"boolean\",\"default\":true},{\"name\":\"searchable\",\"type\":\"boolean\",\"default\":true},{\"name\":\"reportable\",\"type\":\"boolean\",\"default\":true}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** name of the dataset */
   private java.lang.String name;
   private boolean isEntity;
   private boolean isTransaction;
   private java.util.List<graphene.model.idl.G_DataSetField> fields;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public G_DataSet() {}

  /**
   * All-args constructor.
   */
  public G_DataSet(java.lang.String name, java.lang.Boolean isEntity, java.lang.Boolean isTransaction, java.util.List<graphene.model.idl.G_DataSetField> fields) {
    this.name = name;
    this.isEntity = isEntity;
    this.isTransaction = isTransaction;
    this.fields = fields;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return isEntity;
    case 2: return isTransaction;
    case 3: return fields;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.String)value$; break;
    case 1: isEntity = (java.lang.Boolean)value$; break;
    case 2: isTransaction = (java.lang.Boolean)value$; break;
    case 3: fields = (java.util.List<graphene.model.idl.G_DataSetField>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * name of the dataset   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * name of the dataset   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'isEntity' field.
   */
  public java.lang.Boolean getIsEntity() {
    return isEntity;
  }

  /**
   * Sets the value of the 'isEntity' field.
   * @param value the value to set.
   */
  public void setIsEntity(java.lang.Boolean value) {
    this.isEntity = value;
  }

  /**
   * Gets the value of the 'isTransaction' field.
   */
  public java.lang.Boolean getIsTransaction() {
    return isTransaction;
  }

  /**
   * Sets the value of the 'isTransaction' field.
   * @param value the value to set.
   */
  public void setIsTransaction(java.lang.Boolean value) {
    this.isTransaction = value;
  }

  /**
   * Gets the value of the 'fields' field.
   */
  public java.util.List<graphene.model.idl.G_DataSetField> getFields() {
    return fields;
  }

  /**
   * Sets the value of the 'fields' field.
   * @param value the value to set.
   */
  public void setFields(java.util.List<graphene.model.idl.G_DataSetField> value) {
    this.fields = value;
  }

  /** Creates a new G_DataSet RecordBuilder */
  public static graphene.model.idl.G_DataSet.Builder newBuilder() {
    return new graphene.model.idl.G_DataSet.Builder();
  }
  
  /** Creates a new G_DataSet RecordBuilder by copying an existing Builder */
  public static graphene.model.idl.G_DataSet.Builder newBuilder(graphene.model.idl.G_DataSet.Builder other) {
    return new graphene.model.idl.G_DataSet.Builder(other);
  }
  
  /** Creates a new G_DataSet RecordBuilder by copying an existing G_DataSet instance */
  public static graphene.model.idl.G_DataSet.Builder newBuilder(graphene.model.idl.G_DataSet other) {
    return new graphene.model.idl.G_DataSet.Builder(other);
  }
  
  /**
   * RecordBuilder for G_DataSet instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<G_DataSet>
    implements org.apache.avro.data.RecordBuilder<G_DataSet> {

    private java.lang.String name;
    private boolean isEntity;
    private boolean isTransaction;
    private java.util.List<graphene.model.idl.G_DataSetField> fields;

    /** Creates a new Builder */
    private Builder() {
      super(graphene.model.idl.G_DataSet.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(graphene.model.idl.G_DataSet.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.isEntity)) {
        this.isEntity = data().deepCopy(fields()[1].schema(), other.isEntity);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.isTransaction)) {
        this.isTransaction = data().deepCopy(fields()[2].schema(), other.isTransaction);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.fields)) {
        this.fields = data().deepCopy(fields()[3].schema(), other.fields);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing G_DataSet instance */
    private Builder(graphene.model.idl.G_DataSet other) {
            super(graphene.model.idl.G_DataSet.SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.isEntity)) {
        this.isEntity = data().deepCopy(fields()[1].schema(), other.isEntity);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.isTransaction)) {
        this.isTransaction = data().deepCopy(fields()[2].schema(), other.isTransaction);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.fields)) {
        this.fields = data().deepCopy(fields()[3].schema(), other.fields);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'name' field */
    public java.lang.String getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public graphene.model.idl.G_DataSet.Builder setName(java.lang.String value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'name' field */
    public graphene.model.idl.G_DataSet.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'isEntity' field */
    public java.lang.Boolean getIsEntity() {
      return isEntity;
    }
    
    /** Sets the value of the 'isEntity' field */
    public graphene.model.idl.G_DataSet.Builder setIsEntity(boolean value) {
      validate(fields()[1], value);
      this.isEntity = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'isEntity' field has been set */
    public boolean hasIsEntity() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'isEntity' field */
    public graphene.model.idl.G_DataSet.Builder clearIsEntity() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'isTransaction' field */
    public java.lang.Boolean getIsTransaction() {
      return isTransaction;
    }
    
    /** Sets the value of the 'isTransaction' field */
    public graphene.model.idl.G_DataSet.Builder setIsTransaction(boolean value) {
      validate(fields()[2], value);
      this.isTransaction = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'isTransaction' field has been set */
    public boolean hasIsTransaction() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'isTransaction' field */
    public graphene.model.idl.G_DataSet.Builder clearIsTransaction() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'fields' field */
    public java.util.List<graphene.model.idl.G_DataSetField> getFields() {
      return fields;
    }
    
    /** Sets the value of the 'fields' field */
    public graphene.model.idl.G_DataSet.Builder setFields(java.util.List<graphene.model.idl.G_DataSetField> value) {
      validate(fields()[3], value);
      this.fields = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'fields' field has been set */
    public boolean hasFields() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'fields' field */
    public graphene.model.idl.G_DataSet.Builder clearFields() {
      fields = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public G_DataSet build() {
      try {
        G_DataSet record = new G_DataSet();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.String) defaultValue(fields()[0]);
        record.isEntity = fieldSetFlags()[1] ? this.isEntity : (java.lang.Boolean) defaultValue(fields()[1]);
        record.isTransaction = fieldSetFlags()[2] ? this.isTransaction : (java.lang.Boolean) defaultValue(fields()[2]);
        record.fields = fieldSetFlags()[3] ? this.fields : (java.util.List<graphene.model.idl.G_DataSetField>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
