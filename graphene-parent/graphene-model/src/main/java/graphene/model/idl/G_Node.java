/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package graphene.model.idl;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class G_Node extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"G_Node\",\"namespace\":\"graphene.model.idl\",\"fields\":[{\"name\":\"dataSet\",\"type\":[{\"type\":\"array\",\"items\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}},\"null\"]},{\"name\":\"edited\",\"type\":\"boolean\",\"default\":false},{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"idType\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"idVal\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"label\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"color\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"degree\",\"type\":\"int\",\"default\":0},{\"name\":\"isCluster\",\"type\":\"boolean\",\"default\":false},{\"name\":\"isUsed\",\"type\":\"boolean\",\"default\":false},{\"name\":\"minScore\",\"type\":\"double\",\"default\":0.0},{\"name\":\"nbrLinks\",\"type\":\"int\",\"default\":0},{\"name\":\"priority\",\"type\":\"double\",\"default\":0.0},{\"name\":\"scanned\",\"type\":\"boolean\",\"default\":false},{\"name\":\"size\",\"type\":\"int\",\"default\":16},{\"name\":\"traversed\",\"type\":\"boolean\",\"default\":false},{\"name\":\"isLeaf\",\"type\":\"boolean\",\"doc\":\"default, until children added\",\"default\":true},{\"name\":\"isOrigin\",\"type\":\"boolean\",\"doc\":\"true if it's the one searched for\",\"default\":false},{\"name\":\"nodeType\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"doc\":\"Used to be called family.\"},{\"name\":\"nodes\",\"type\":[{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"G_Entity\",\"doc\":\"The nodes in the social, financial, communications or other graphs. May represent concrete individuals or organizations,\\n\\t specific proxies such as accounts, or the implicit individuals or groups behind those other entities.\",\"fields\":[{\"name\":\"uid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"This uid must represent either (1) a globally unique identifier that can be used to retrieve data for an\\n\\t\\t\\texplicit entity, or (2) encoded query information that can be used to find a set of associated record\\n\\t\\t\\tnotionally representing an implicit entity (e.g. Loans&FirstName&LastName&Gender). Must not be used for\\n\\t\\t\\tIDs that aren't globally unique.  For example, in Kiva, \\\"Lenders\\\" has a UID (\\\"L12345\\\") while \\\"Borrowers\\\"\\n\\t\\t\\thave an encoded search in the Loans table for uid (\\\"B{loan:23456;name=Daniel}\\\").  The encoded information\\n\\t\\t\\tis data layer-specific, may be different from entity to entity or data set to data set, and should be\\n\\t\\t\\tconsidered opaque to the consumers of the entities.  Entities of type 2 should always have the Entity Tag\\n\\t\\t\\tANONYMOUS to help distinguish them when required.\"},{\"name\":\"tags\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"enum\",\"name\":\"G_EntityTag\",\"doc\":\"This is the current list of tags for Entities:\\n\\t \\n\\t CHANGED in 1.6:\\n\\t   - added ACCOUNT_OWNER, CLUSTER_SUMMARY\",\"symbols\":[\"ACCOUNT_OWNER\",\"ACCOUNT\",\"GROUP\",\"CLUSTER\",\"CLUSTER_SUMMARY\",\"FILE\",\"ANONYMOUS\",\"PROMPT_FOR_DETAILS\",\"OTHER\"]}},\"doc\":\"Entity Tags (see above, e.g. \\\"ACCOUNT\\\")\"},{\"name\":\"provenance\",\"type\":[{\"type\":\"record\",\"name\":\"G_Provenance\",\"doc\":\"This is a placeholder for future modeling of provenance. It is not a required field in any service calls.\",\"fields\":[{\"name\":\"uri\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Placeholder for now. Express provenance as a single URI.\"}]},\"null\"],\"default\":null},{\"name\":\"uncertainty\",\"type\":[{\"type\":\"record\",\"name\":\"G_Uncertainty\",\"doc\":\"This is a placeholder for future modeling of uncertainty. It is not a required field in any service calls.\\n\\t\\n\\tCHANGED IN 1.6\",\"fields\":[{\"name\":\"confidence\",\"type\":\"double\",\"doc\":\"Placeholder for now. Express original source confidence as a single number from 0 to 1.\",\"default\":1},{\"name\":\"currency\",\"type\":\"double\",\"doc\":\"Placeholder for now. Express confidence in currency of data as a single number from 0 to 1.\",\"default\":1}]},\"null\"],\"default\":null},{\"name\":\"properties\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"G_Property\",\"doc\":\"Each property on an Entity or Link is a name-value pair, with data type information, as well as optional\\n\\t provenance. Tags provide a way for the data provider to associate semantic annotations to each property\\n\\t in terms of the semantics of the application.  \\n\\t \\n\\t CHANGED IN 1.6\",\"fields\":[{\"name\":\"key\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"the field name in the underlying data source\"},{\"name\":\"friendlyText\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"user-friendly short-text for key (displayable)\",\"default\":null},{\"name\":\"styleType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"singletonRange\",\"type\":{\"type\":\"record\",\"name\":\"G_SingletonRange\",\"doc\":\"Single value\\n\\t\\n\\tADDED IN 1.5\",\"fields\":[{\"name\":\"value\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"int\",\"float\",\"double\",\"long\",\"boolean\",{\"type\":\"record\",\"name\":\"G_GeoData\",\"doc\":\"Structured representation of geo-spatial data.\",\"fields\":[{\"name\":\"text\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"an address or other place reference; unstructured text field\",\"default\":null},{\"name\":\"lat\",\"type\":[\"double\",\"null\"],\"doc\":\"latitude\",\"default\":null},{\"name\":\"lon\",\"type\":[\"double\",\"null\"],\"doc\":\"longitude\",\"default\":null},{\"name\":\"cc\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"ISO 3 digit country code\",\"default\":null}]}]},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"G_PropertyType\",\"doc\":\"Allowed types for Property values.\\n\\n\\t CHANGED in 1.5\",\"symbols\":[\"DOUBLE\",\"LONG\",\"BOOLEAN\",\"STRING\",\"DATE\",\"GEO\",\"OTHER\"]},\"doc\":\"One of DOUBLE, LONG, BOOLEAN, STRING, DATE, GEO, OTHER\"}]},\"doc\":\"range of values\",\"default\":null},{\"name\":\"listRange\",\"type\":{\"type\":\"record\",\"name\":\"G_ListRange\",\"doc\":\"List of values\\n\\t\\n\\tADDED IN 1.5\",\"fields\":[{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"int\",\"float\",\"double\",\"long\",\"boolean\",\"G_GeoData\"]}},{\"name\":\"type\",\"type\":\"G_PropertyType\",\"doc\":\"One of DOUBLE, LONG, BOOLEAN, STRING, DATE, GEO, OTHER\"}]},\"default\":null},{\"name\":\"boundedRange\",\"type\":{\"type\":\"record\",\"name\":\"G_BoundedRange\",\"doc\":\"Bounded or unbounded range values\\n\\t\\n\\tADDED IN 1.5\",\"fields\":[{\"name\":\"start\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"int\",\"float\",\"double\",\"long\",\"boolean\",\"G_GeoData\",\"null\"],\"doc\":\"start of range, or null if unbounded start\"},{\"name\":\"end\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"int\",\"float\",\"double\",\"long\",\"boolean\",\"G_GeoData\",\"null\"],\"doc\":\"end of range, or null if unbounded start\"},{\"name\":\"inclusive\",\"type\":\"boolean\",\"doc\":\"If true, range includes specified endpoint. If false, range is exclusive.\"},{\"name\":\"type\",\"type\":\"G_PropertyType\",\"doc\":\"One of DOUBLE, LONG, BOOLEAN, STRING, DATE, GEO, OTHER\"}]},\"default\":null},{\"name\":\"distributionRange\",\"type\":{\"type\":\"record\",\"name\":\"G_DistributionRange\",\"doc\":\"Describes a distribution of values. \\n\\t \\n\\tADDED IN 1.6\",\"fields\":[{\"name\":\"distribution\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"G_Frequency\",\"doc\":\"A frequency or probability element of a distribution.\\n\\t \\n\\tADDED IN 1.6\",\"fields\":[{\"name\":\"range\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"int\",\"float\",\"double\",\"long\",\"boolean\",\"G_GeoData\",\"G_ListRange\",\"G_BoundedRange\"],\"doc\":\"the value range which occurs with some specified frequency\"},{\"name\":\"frequency\",\"type\":\"double\",\"doc\":\"frequency as a count, or probability as a value from 0-1.\"}]}}},{\"name\":\"rangeType\",\"type\":{\"type\":\"enum\",\"name\":\"G_RangeType\",\"doc\":\"Allowed types for Ranges of values.\\n\\t\\n\\tCHANGED IN 1.6\",\"symbols\":[\"SINGLETON\",\"LIST\",\"BOUNDED\",\"DISTRIBUTION\"]},\"doc\":\"Describes how the values in the distribution are summarised\"},{\"name\":\"type\",\"type\":\"G_PropertyType\",\"doc\":\"The type of value that the distribution describes. One of DOUBLE, LONG, BOOLEAN, STRING, DATE, GEO, OTHER\"},{\"name\":\"isProbability\",\"type\":\"boolean\",\"doc\":\"True if a probability distribution, false if a frequency distribution\",\"default\":false}]},\"default\":null},{\"name\":\"provenance\",\"type\":[\"G_Provenance\",\"null\"],\"default\":n","ull},{\"name\":\"uncertainty\",\"type\":[\"G_Uncertainty\",\"null\"],\"default\":null},{\"name\":\"tags\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"enum\",\"name\":\"G_PropertyTag\",\"doc\":\"Tags are defined by the application layer as a taxonomy of user and application concepts,\\n\\t independent of the data sources. This allows application semantics to be re-used with new\\n\\t data, with a minimum of new software design and development. Data layer entity types, link\\n\\t types and properties should be mapped into the list of tags. The application layer must be\\n\\t able to search by native field name or by tag interchangeably, and properties returned must\\n\\t contain both native field names as well as tags.\\n\\t \\n\\t The list of tags may change as application features evolve, though that will require\\n\\t collaboration with the data layer providers. Evolving the tag list should not change the\\n\\t Data Access or Search APIs.\\n\\n\\t This is the current list of tags for Properties:\\n\\t \\n\\t CHANGED in 1.5:\\n\\t   - CREDIT/DEBIT changed to INFLOWING/OUTFLOWING\\n\\t   - added USD\\n\\t   - added DURATION\\n\\t   \\n\\t CHANGED in 1.6:\\n\\t   - added ENTITY_TYPE\\n\\t   - added ACCOUNT_OWNER, CLUSTER_SUMMARY, COUNTRY_CODE\\n\\t   \\n\\t CHANGED in 1.7:\\n\\t   - added CLUSTER\",\"symbols\":[\"ID\",\"TYPE\",\"ENTITY_TYPE\",\"ACCOUNT_OWNER\",\"CLUSTER_SUMMARY\",\"CLUSTER\",\"NAME\",\"LABEL\",\"STAT\",\"TEXT\",\"STATUS\",\"ANNOTATION\",\"WARNING\",\"LINKED_DATA\",\"IMAGE\",\"GEO\",\"COUNTRY_CODE\",\"DATE\",\"AMOUNT\",\"INFLOWING\",\"OUTFLOWING\",\"COUNT\",\"SERIES\",\"CONSTRUCTED\",\"RAW\",\"USD\",\"DURATION\"]}},\"doc\":\"one or more tags from the Tag list, used to map this source-specific field into the semantics of applications\"}]},\"avro.java.string\":\"String\"}}]}},\"null\"]},{\"name\":\"edges\",\"type\":[{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"G_Link\",\"doc\":\"* The links in the social, financial, communications or other graphs. May represent communication events, financial transactions\\n\\t * or social connections.\",\"fields\":[{\"name\":\"tags\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"enum\",\"name\":\"G_LinkTag\",\"doc\":\"This is the current list of tags for Links:\",\"symbols\":[\"FINANCIAL\",\"SOCIAL\",\"COMMUNICATION\",\"OTHER\"]}},\"doc\":\"Link Tags (see above, e.g. \\\"FINANCIAL\\\")\"},{\"name\":\"source\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"source entity uid\",\"default\":null},{\"name\":\"target\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"target entity uid\",\"default\":null},{\"name\":\"directed\",\"type\":\"boolean\",\"doc\":\"true if directed, false if undirected\",\"default\":true},{\"name\":\"provenance\",\"type\":[\"G_Provenance\",\"null\"],\"default\":null},{\"name\":\"uncertainty\",\"type\":[\"G_Uncertainty\",\"null\"],\"default\":null},{\"name\":\"properties\",\"type\":{\"type\":\"map\",\"values\":\"G_Property\",\"avro.java.string\":\"String\"}}]}},\"null\"]},{\"name\":\"properties\",\"type\":[{\"type\":\"array\",\"items\":\"G_Property\"},\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.util.List<java.util.Map<java.lang.String,java.lang.String>> dataSet;
   private boolean edited;
   private java.lang.String id;
   private java.lang.String idType;
   private java.lang.String idVal;
   private java.lang.String label;
   private java.lang.String color;
   private int degree;
   private boolean isCluster;
   private boolean isUsed;
   private double minScore;
   private int nbrLinks;
   private double priority;
   private boolean scanned;
   private int size;
   private boolean traversed;
  /** default, until children added */
   private boolean isLeaf;
  /** true if it's the one searched for */
   private boolean isOrigin;
  /** Used to be called family. */
   private java.lang.String nodeType;
   private java.util.List<graphene.model.idl.G_Entity> nodes;
   private java.util.List<graphene.model.idl.G_Link> edges;
   private java.util.List<graphene.model.idl.G_Property> properties;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public G_Node() {}

  /**
   * All-args constructor.
   */
  public G_Node(java.util.List<java.util.Map<java.lang.String,java.lang.String>> dataSet, java.lang.Boolean edited, java.lang.String id, java.lang.String idType, java.lang.String idVal, java.lang.String label, java.lang.String color, java.lang.Integer degree, java.lang.Boolean isCluster, java.lang.Boolean isUsed, java.lang.Double minScore, java.lang.Integer nbrLinks, java.lang.Double priority, java.lang.Boolean scanned, java.lang.Integer size, java.lang.Boolean traversed, java.lang.Boolean isLeaf, java.lang.Boolean isOrigin, java.lang.String nodeType, java.util.List<graphene.model.idl.G_Entity> nodes, java.util.List<graphene.model.idl.G_Link> edges, java.util.List<graphene.model.idl.G_Property> properties) {
    this.dataSet = dataSet;
    this.edited = edited;
    this.id = id;
    this.idType = idType;
    this.idVal = idVal;
    this.label = label;
    this.color = color;
    this.degree = degree;
    this.isCluster = isCluster;
    this.isUsed = isUsed;
    this.minScore = minScore;
    this.nbrLinks = nbrLinks;
    this.priority = priority;
    this.scanned = scanned;
    this.size = size;
    this.traversed = traversed;
    this.isLeaf = isLeaf;
    this.isOrigin = isOrigin;
    this.nodeType = nodeType;
    this.nodes = nodes;
    this.edges = edges;
    this.properties = properties;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return dataSet;
    case 1: return edited;
    case 2: return id;
    case 3: return idType;
    case 4: return idVal;
    case 5: return label;
    case 6: return color;
    case 7: return degree;
    case 8: return isCluster;
    case 9: return isUsed;
    case 10: return minScore;
    case 11: return nbrLinks;
    case 12: return priority;
    case 13: return scanned;
    case 14: return size;
    case 15: return traversed;
    case 16: return isLeaf;
    case 17: return isOrigin;
    case 18: return nodeType;
    case 19: return nodes;
    case 20: return edges;
    case 21: return properties;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: dataSet = (java.util.List<java.util.Map<java.lang.String,java.lang.String>>)value$; break;
    case 1: edited = (java.lang.Boolean)value$; break;
    case 2: id = (java.lang.String)value$; break;
    case 3: idType = (java.lang.String)value$; break;
    case 4: idVal = (java.lang.String)value$; break;
    case 5: label = (java.lang.String)value$; break;
    case 6: color = (java.lang.String)value$; break;
    case 7: degree = (java.lang.Integer)value$; break;
    case 8: isCluster = (java.lang.Boolean)value$; break;
    case 9: isUsed = (java.lang.Boolean)value$; break;
    case 10: minScore = (java.lang.Double)value$; break;
    case 11: nbrLinks = (java.lang.Integer)value$; break;
    case 12: priority = (java.lang.Double)value$; break;
    case 13: scanned = (java.lang.Boolean)value$; break;
    case 14: size = (java.lang.Integer)value$; break;
    case 15: traversed = (java.lang.Boolean)value$; break;
    case 16: isLeaf = (java.lang.Boolean)value$; break;
    case 17: isOrigin = (java.lang.Boolean)value$; break;
    case 18: nodeType = (java.lang.String)value$; break;
    case 19: nodes = (java.util.List<graphene.model.idl.G_Entity>)value$; break;
    case 20: edges = (java.util.List<graphene.model.idl.G_Link>)value$; break;
    case 21: properties = (java.util.List<graphene.model.idl.G_Property>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'dataSet' field.
   */
  public java.util.List<java.util.Map<java.lang.String,java.lang.String>> getDataSet() {
    return dataSet;
  }

  /**
   * Sets the value of the 'dataSet' field.
   * @param value the value to set.
   */
  public void setDataSet(java.util.List<java.util.Map<java.lang.String,java.lang.String>> value) {
    this.dataSet = value;
  }

  /**
   * Gets the value of the 'edited' field.
   */
  public java.lang.Boolean getEdited() {
    return edited;
  }

  /**
   * Sets the value of the 'edited' field.
   * @param value the value to set.
   */
  public void setEdited(java.lang.Boolean value) {
    this.edited = value;
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'idType' field.
   */
  public java.lang.String getIdType() {
    return idType;
  }

  /**
   * Sets the value of the 'idType' field.
   * @param value the value to set.
   */
  public void setIdType(java.lang.String value) {
    this.idType = value;
  }

  /**
   * Gets the value of the 'idVal' field.
   */
  public java.lang.String getIdVal() {
    return idVal;
  }

  /**
   * Sets the value of the 'idVal' field.
   * @param value the value to set.
   */
  public void setIdVal(java.lang.String value) {
    this.idVal = value;
  }

  /**
   * Gets the value of the 'label' field.
   */
  public java.lang.String getLabel() {
    return label;
  }

  /**
   * Sets the value of the 'label' field.
   * @param value the value to set.
   */
  public void setLabel(java.lang.String value) {
    this.label = value;
  }

  /**
   * Gets the value of the 'color' field.
   */
  public java.lang.String getColor() {
    return color;
  }

  /**
   * Sets the value of the 'color' field.
   * @param value the value to set.
   */
  public void setColor(java.lang.String value) {
    this.color = value;
  }

  /**
   * Gets the value of the 'degree' field.
   */
  public java.lang.Integer getDegree() {
    return degree;
  }

  /**
   * Sets the value of the 'degree' field.
   * @param value the value to set.
   */
  public void setDegree(java.lang.Integer value) {
    this.degree = value;
  }

  /**
   * Gets the value of the 'isCluster' field.
   */
  public java.lang.Boolean getIsCluster() {
    return isCluster;
  }

  /**
   * Sets the value of the 'isCluster' field.
   * @param value the value to set.
   */
  public void setIsCluster(java.lang.Boolean value) {
    this.isCluster = value;
  }

  /**
   * Gets the value of the 'isUsed' field.
   */
  public java.lang.Boolean getIsUsed() {
    return isUsed;
  }

  /**
   * Sets the value of the 'isUsed' field.
   * @param value the value to set.
   */
  public void setIsUsed(java.lang.Boolean value) {
    this.isUsed = value;
  }

  /**
   * Gets the value of the 'minScore' field.
   */
  public java.lang.Double getMinScore() {
    return minScore;
  }

  /**
   * Sets the value of the 'minScore' field.
   * @param value the value to set.
   */
  public void setMinScore(java.lang.Double value) {
    this.minScore = value;
  }

  /**
   * Gets the value of the 'nbrLinks' field.
   */
  public java.lang.Integer getNbrLinks() {
    return nbrLinks;
  }

  /**
   * Sets the value of the 'nbrLinks' field.
   * @param value the value to set.
   */
  public void setNbrLinks(java.lang.Integer value) {
    this.nbrLinks = value;
  }

  /**
   * Gets the value of the 'priority' field.
   */
  public java.lang.Double getPriority() {
    return priority;
  }

  /**
   * Sets the value of the 'priority' field.
   * @param value the value to set.
   */
  public void setPriority(java.lang.Double value) {
    this.priority = value;
  }

  /**
   * Gets the value of the 'scanned' field.
   */
  public java.lang.Boolean getScanned() {
    return scanned;
  }

  /**
   * Sets the value of the 'scanned' field.
   * @param value the value to set.
   */
  public void setScanned(java.lang.Boolean value) {
    this.scanned = value;
  }

  /**
   * Gets the value of the 'size' field.
   */
  public java.lang.Integer getSize() {
    return size;
  }

  /**
   * Sets the value of the 'size' field.
   * @param value the value to set.
   */
  public void setSize(java.lang.Integer value) {
    this.size = value;
  }

  /**
   * Gets the value of the 'traversed' field.
   */
  public java.lang.Boolean getTraversed() {
    return traversed;
  }

  /**
   * Sets the value of the 'traversed' field.
   * @param value the value to set.
   */
  public void setTraversed(java.lang.Boolean value) {
    this.traversed = value;
  }

  /**
   * Gets the value of the 'isLeaf' field.
   * default, until children added   */
  public java.lang.Boolean getIsLeaf() {
    return isLeaf;
  }

  /**
   * Sets the value of the 'isLeaf' field.
   * default, until children added   * @param value the value to set.
   */
  public void setIsLeaf(java.lang.Boolean value) {
    this.isLeaf = value;
  }

  /**
   * Gets the value of the 'isOrigin' field.
   * true if it's the one searched for   */
  public java.lang.Boolean getIsOrigin() {
    return isOrigin;
  }

  /**
   * Sets the value of the 'isOrigin' field.
   * true if it's the one searched for   * @param value the value to set.
   */
  public void setIsOrigin(java.lang.Boolean value) {
    this.isOrigin = value;
  }

  /**
   * Gets the value of the 'nodeType' field.
   * Used to be called family.   */
  public java.lang.String getNodeType() {
    return nodeType;
  }

  /**
   * Sets the value of the 'nodeType' field.
   * Used to be called family.   * @param value the value to set.
   */
  public void setNodeType(java.lang.String value) {
    this.nodeType = value;
  }

  /**
   * Gets the value of the 'nodes' field.
   */
  public java.util.List<graphene.model.idl.G_Entity> getNodes() {
    return nodes;
  }

  /**
   * Sets the value of the 'nodes' field.
   * @param value the value to set.
   */
  public void setNodes(java.util.List<graphene.model.idl.G_Entity> value) {
    this.nodes = value;
  }

  /**
   * Gets the value of the 'edges' field.
   */
  public java.util.List<graphene.model.idl.G_Link> getEdges() {
    return edges;
  }

  /**
   * Sets the value of the 'edges' field.
   * @param value the value to set.
   */
  public void setEdges(java.util.List<graphene.model.idl.G_Link> value) {
    this.edges = value;
  }

  /**
   * Gets the value of the 'properties' field.
   */
  public java.util.List<graphene.model.idl.G_Property> getProperties() {
    return properties;
  }

  /**
   * Sets the value of the 'properties' field.
   * @param value the value to set.
   */
  public void setProperties(java.util.List<graphene.model.idl.G_Property> value) {
    this.properties = value;
  }

  /** Creates a new G_Node RecordBuilder */
  public static graphene.model.idl.G_Node.Builder newBuilder() {
    return new graphene.model.idl.G_Node.Builder();
  }
  
  /** Creates a new G_Node RecordBuilder by copying an existing Builder */
  public static graphene.model.idl.G_Node.Builder newBuilder(graphene.model.idl.G_Node.Builder other) {
    return new graphene.model.idl.G_Node.Builder(other);
  }
  
  /** Creates a new G_Node RecordBuilder by copying an existing G_Node instance */
  public static graphene.model.idl.G_Node.Builder newBuilder(graphene.model.idl.G_Node other) {
    return new graphene.model.idl.G_Node.Builder(other);
  }
  
  /**
   * RecordBuilder for G_Node instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<G_Node>
    implements org.apache.avro.data.RecordBuilder<G_Node> {

    private java.util.List<java.util.Map<java.lang.String,java.lang.String>> dataSet;
    private boolean edited;
    private java.lang.String id;
    private java.lang.String idType;
    private java.lang.String idVal;
    private java.lang.String label;
    private java.lang.String color;
    private int degree;
    private boolean isCluster;
    private boolean isUsed;
    private double minScore;
    private int nbrLinks;
    private double priority;
    private boolean scanned;
    private int size;
    private boolean traversed;
    private boolean isLeaf;
    private boolean isOrigin;
    private java.lang.String nodeType;
    private java.util.List<graphene.model.idl.G_Entity> nodes;
    private java.util.List<graphene.model.idl.G_Link> edges;
    private java.util.List<graphene.model.idl.G_Property> properties;

    /** Creates a new Builder */
    private Builder() {
      super(graphene.model.idl.G_Node.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(graphene.model.idl.G_Node.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.dataSet)) {
        this.dataSet = data().deepCopy(fields()[0].schema(), other.dataSet);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.edited)) {
        this.edited = data().deepCopy(fields()[1].schema(), other.edited);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.id)) {
        this.id = data().deepCopy(fields()[2].schema(), other.id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.idType)) {
        this.idType = data().deepCopy(fields()[3].schema(), other.idType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.idVal)) {
        this.idVal = data().deepCopy(fields()[4].schema(), other.idVal);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.label)) {
        this.label = data().deepCopy(fields()[5].schema(), other.label);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.color)) {
        this.color = data().deepCopy(fields()[6].schema(), other.color);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.degree)) {
        this.degree = data().deepCopy(fields()[7].schema(), other.degree);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.isCluster)) {
        this.isCluster = data().deepCopy(fields()[8].schema(), other.isCluster);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.isUsed)) {
        this.isUsed = data().deepCopy(fields()[9].schema(), other.isUsed);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.minScore)) {
        this.minScore = data().deepCopy(fields()[10].schema(), other.minScore);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.nbrLinks)) {
        this.nbrLinks = data().deepCopy(fields()[11].schema(), other.nbrLinks);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.priority)) {
        this.priority = data().deepCopy(fields()[12].schema(), other.priority);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.scanned)) {
        this.scanned = data().deepCopy(fields()[13].schema(), other.scanned);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.size)) {
        this.size = data().deepCopy(fields()[14].schema(), other.size);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.traversed)) {
        this.traversed = data().deepCopy(fields()[15].schema(), other.traversed);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.isLeaf)) {
        this.isLeaf = data().deepCopy(fields()[16].schema(), other.isLeaf);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.isOrigin)) {
        this.isOrigin = data().deepCopy(fields()[17].schema(), other.isOrigin);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.nodeType)) {
        this.nodeType = data().deepCopy(fields()[18].schema(), other.nodeType);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.nodes)) {
        this.nodes = data().deepCopy(fields()[19].schema(), other.nodes);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.edges)) {
        this.edges = data().deepCopy(fields()[20].schema(), other.edges);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.properties)) {
        this.properties = data().deepCopy(fields()[21].schema(), other.properties);
        fieldSetFlags()[21] = true;
      }
    }
    
    /** Creates a Builder by copying an existing G_Node instance */
    private Builder(graphene.model.idl.G_Node other) {
            super(graphene.model.idl.G_Node.SCHEMA$);
      if (isValidValue(fields()[0], other.dataSet)) {
        this.dataSet = data().deepCopy(fields()[0].schema(), other.dataSet);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.edited)) {
        this.edited = data().deepCopy(fields()[1].schema(), other.edited);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.id)) {
        this.id = data().deepCopy(fields()[2].schema(), other.id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.idType)) {
        this.idType = data().deepCopy(fields()[3].schema(), other.idType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.idVal)) {
        this.idVal = data().deepCopy(fields()[4].schema(), other.idVal);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.label)) {
        this.label = data().deepCopy(fields()[5].schema(), other.label);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.color)) {
        this.color = data().deepCopy(fields()[6].schema(), other.color);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.degree)) {
        this.degree = data().deepCopy(fields()[7].schema(), other.degree);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.isCluster)) {
        this.isCluster = data().deepCopy(fields()[8].schema(), other.isCluster);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.isUsed)) {
        this.isUsed = data().deepCopy(fields()[9].schema(), other.isUsed);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.minScore)) {
        this.minScore = data().deepCopy(fields()[10].schema(), other.minScore);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.nbrLinks)) {
        this.nbrLinks = data().deepCopy(fields()[11].schema(), other.nbrLinks);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.priority)) {
        this.priority = data().deepCopy(fields()[12].schema(), other.priority);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.scanned)) {
        this.scanned = data().deepCopy(fields()[13].schema(), other.scanned);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.size)) {
        this.size = data().deepCopy(fields()[14].schema(), other.size);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.traversed)) {
        this.traversed = data().deepCopy(fields()[15].schema(), other.traversed);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.isLeaf)) {
        this.isLeaf = data().deepCopy(fields()[16].schema(), other.isLeaf);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.isOrigin)) {
        this.isOrigin = data().deepCopy(fields()[17].schema(), other.isOrigin);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.nodeType)) {
        this.nodeType = data().deepCopy(fields()[18].schema(), other.nodeType);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.nodes)) {
        this.nodes = data().deepCopy(fields()[19].schema(), other.nodes);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.edges)) {
        this.edges = data().deepCopy(fields()[20].schema(), other.edges);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.properties)) {
        this.properties = data().deepCopy(fields()[21].schema(), other.properties);
        fieldSetFlags()[21] = true;
      }
    }

    /** Gets the value of the 'dataSet' field */
    public java.util.List<java.util.Map<java.lang.String,java.lang.String>> getDataSet() {
      return dataSet;
    }
    
    /** Sets the value of the 'dataSet' field */
    public graphene.model.idl.G_Node.Builder setDataSet(java.util.List<java.util.Map<java.lang.String,java.lang.String>> value) {
      validate(fields()[0], value);
      this.dataSet = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'dataSet' field has been set */
    public boolean hasDataSet() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'dataSet' field */
    public graphene.model.idl.G_Node.Builder clearDataSet() {
      dataSet = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'edited' field */
    public java.lang.Boolean getEdited() {
      return edited;
    }
    
    /** Sets the value of the 'edited' field */
    public graphene.model.idl.G_Node.Builder setEdited(boolean value) {
      validate(fields()[1], value);
      this.edited = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'edited' field has been set */
    public boolean hasEdited() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'edited' field */
    public graphene.model.idl.G_Node.Builder clearEdited() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'id' field */
    public java.lang.String getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public graphene.model.idl.G_Node.Builder setId(java.lang.String value) {
      validate(fields()[2], value);
      this.id = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'id' field */
    public graphene.model.idl.G_Node.Builder clearId() {
      id = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'idType' field */
    public java.lang.String getIdType() {
      return idType;
    }
    
    /** Sets the value of the 'idType' field */
    public graphene.model.idl.G_Node.Builder setIdType(java.lang.String value) {
      validate(fields()[3], value);
      this.idType = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'idType' field has been set */
    public boolean hasIdType() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'idType' field */
    public graphene.model.idl.G_Node.Builder clearIdType() {
      idType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'idVal' field */
    public java.lang.String getIdVal() {
      return idVal;
    }
    
    /** Sets the value of the 'idVal' field */
    public graphene.model.idl.G_Node.Builder setIdVal(java.lang.String value) {
      validate(fields()[4], value);
      this.idVal = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'idVal' field has been set */
    public boolean hasIdVal() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'idVal' field */
    public graphene.model.idl.G_Node.Builder clearIdVal() {
      idVal = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'label' field */
    public java.lang.String getLabel() {
      return label;
    }
    
    /** Sets the value of the 'label' field */
    public graphene.model.idl.G_Node.Builder setLabel(java.lang.String value) {
      validate(fields()[5], value);
      this.label = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'label' field has been set */
    public boolean hasLabel() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'label' field */
    public graphene.model.idl.G_Node.Builder clearLabel() {
      label = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'color' field */
    public java.lang.String getColor() {
      return color;
    }
    
    /** Sets the value of the 'color' field */
    public graphene.model.idl.G_Node.Builder setColor(java.lang.String value) {
      validate(fields()[6], value);
      this.color = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'color' field has been set */
    public boolean hasColor() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'color' field */
    public graphene.model.idl.G_Node.Builder clearColor() {
      color = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'degree' field */
    public java.lang.Integer getDegree() {
      return degree;
    }
    
    /** Sets the value of the 'degree' field */
    public graphene.model.idl.G_Node.Builder setDegree(int value) {
      validate(fields()[7], value);
      this.degree = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'degree' field has been set */
    public boolean hasDegree() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'degree' field */
    public graphene.model.idl.G_Node.Builder clearDegree() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'isCluster' field */
    public java.lang.Boolean getIsCluster() {
      return isCluster;
    }
    
    /** Sets the value of the 'isCluster' field */
    public graphene.model.idl.G_Node.Builder setIsCluster(boolean value) {
      validate(fields()[8], value);
      this.isCluster = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'isCluster' field has been set */
    public boolean hasIsCluster() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'isCluster' field */
    public graphene.model.idl.G_Node.Builder clearIsCluster() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'isUsed' field */
    public java.lang.Boolean getIsUsed() {
      return isUsed;
    }
    
    /** Sets the value of the 'isUsed' field */
    public graphene.model.idl.G_Node.Builder setIsUsed(boolean value) {
      validate(fields()[9], value);
      this.isUsed = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'isUsed' field has been set */
    public boolean hasIsUsed() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'isUsed' field */
    public graphene.model.idl.G_Node.Builder clearIsUsed() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'minScore' field */
    public java.lang.Double getMinScore() {
      return minScore;
    }
    
    /** Sets the value of the 'minScore' field */
    public graphene.model.idl.G_Node.Builder setMinScore(double value) {
      validate(fields()[10], value);
      this.minScore = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'minScore' field has been set */
    public boolean hasMinScore() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'minScore' field */
    public graphene.model.idl.G_Node.Builder clearMinScore() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'nbrLinks' field */
    public java.lang.Integer getNbrLinks() {
      return nbrLinks;
    }
    
    /** Sets the value of the 'nbrLinks' field */
    public graphene.model.idl.G_Node.Builder setNbrLinks(int value) {
      validate(fields()[11], value);
      this.nbrLinks = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'nbrLinks' field has been set */
    public boolean hasNbrLinks() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'nbrLinks' field */
    public graphene.model.idl.G_Node.Builder clearNbrLinks() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'priority' field */
    public java.lang.Double getPriority() {
      return priority;
    }
    
    /** Sets the value of the 'priority' field */
    public graphene.model.idl.G_Node.Builder setPriority(double value) {
      validate(fields()[12], value);
      this.priority = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'priority' field has been set */
    public boolean hasPriority() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'priority' field */
    public graphene.model.idl.G_Node.Builder clearPriority() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'scanned' field */
    public java.lang.Boolean getScanned() {
      return scanned;
    }
    
    /** Sets the value of the 'scanned' field */
    public graphene.model.idl.G_Node.Builder setScanned(boolean value) {
      validate(fields()[13], value);
      this.scanned = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'scanned' field has been set */
    public boolean hasScanned() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'scanned' field */
    public graphene.model.idl.G_Node.Builder clearScanned() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /** Gets the value of the 'size' field */
    public java.lang.Integer getSize() {
      return size;
    }
    
    /** Sets the value of the 'size' field */
    public graphene.model.idl.G_Node.Builder setSize(int value) {
      validate(fields()[14], value);
      this.size = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'size' field has been set */
    public boolean hasSize() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'size' field */
    public graphene.model.idl.G_Node.Builder clearSize() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /** Gets the value of the 'traversed' field */
    public java.lang.Boolean getTraversed() {
      return traversed;
    }
    
    /** Sets the value of the 'traversed' field */
    public graphene.model.idl.G_Node.Builder setTraversed(boolean value) {
      validate(fields()[15], value);
      this.traversed = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'traversed' field has been set */
    public boolean hasTraversed() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'traversed' field */
    public graphene.model.idl.G_Node.Builder clearTraversed() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /** Gets the value of the 'isLeaf' field */
    public java.lang.Boolean getIsLeaf() {
      return isLeaf;
    }
    
    /** Sets the value of the 'isLeaf' field */
    public graphene.model.idl.G_Node.Builder setIsLeaf(boolean value) {
      validate(fields()[16], value);
      this.isLeaf = value;
      fieldSetFlags()[16] = true;
      return this; 
    }
    
    /** Checks whether the 'isLeaf' field has been set */
    public boolean hasIsLeaf() {
      return fieldSetFlags()[16];
    }
    
    /** Clears the value of the 'isLeaf' field */
    public graphene.model.idl.G_Node.Builder clearIsLeaf() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /** Gets the value of the 'isOrigin' field */
    public java.lang.Boolean getIsOrigin() {
      return isOrigin;
    }
    
    /** Sets the value of the 'isOrigin' field */
    public graphene.model.idl.G_Node.Builder setIsOrigin(boolean value) {
      validate(fields()[17], value);
      this.isOrigin = value;
      fieldSetFlags()[17] = true;
      return this; 
    }
    
    /** Checks whether the 'isOrigin' field has been set */
    public boolean hasIsOrigin() {
      return fieldSetFlags()[17];
    }
    
    /** Clears the value of the 'isOrigin' field */
    public graphene.model.idl.G_Node.Builder clearIsOrigin() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /** Gets the value of the 'nodeType' field */
    public java.lang.String getNodeType() {
      return nodeType;
    }
    
    /** Sets the value of the 'nodeType' field */
    public graphene.model.idl.G_Node.Builder setNodeType(java.lang.String value) {
      validate(fields()[18], value);
      this.nodeType = value;
      fieldSetFlags()[18] = true;
      return this; 
    }
    
    /** Checks whether the 'nodeType' field has been set */
    public boolean hasNodeType() {
      return fieldSetFlags()[18];
    }
    
    /** Clears the value of the 'nodeType' field */
    public graphene.model.idl.G_Node.Builder clearNodeType() {
      nodeType = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /** Gets the value of the 'nodes' field */
    public java.util.List<graphene.model.idl.G_Entity> getNodes() {
      return nodes;
    }
    
    /** Sets the value of the 'nodes' field */
    public graphene.model.idl.G_Node.Builder setNodes(java.util.List<graphene.model.idl.G_Entity> value) {
      validate(fields()[19], value);
      this.nodes = value;
      fieldSetFlags()[19] = true;
      return this; 
    }
    
    /** Checks whether the 'nodes' field has been set */
    public boolean hasNodes() {
      return fieldSetFlags()[19];
    }
    
    /** Clears the value of the 'nodes' field */
    public graphene.model.idl.G_Node.Builder clearNodes() {
      nodes = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /** Gets the value of the 'edges' field */
    public java.util.List<graphene.model.idl.G_Link> getEdges() {
      return edges;
    }
    
    /** Sets the value of the 'edges' field */
    public graphene.model.idl.G_Node.Builder setEdges(java.util.List<graphene.model.idl.G_Link> value) {
      validate(fields()[20], value);
      this.edges = value;
      fieldSetFlags()[20] = true;
      return this; 
    }
    
    /** Checks whether the 'edges' field has been set */
    public boolean hasEdges() {
      return fieldSetFlags()[20];
    }
    
    /** Clears the value of the 'edges' field */
    public graphene.model.idl.G_Node.Builder clearEdges() {
      edges = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /** Gets the value of the 'properties' field */
    public java.util.List<graphene.model.idl.G_Property> getProperties() {
      return properties;
    }
    
    /** Sets the value of the 'properties' field */
    public graphene.model.idl.G_Node.Builder setProperties(java.util.List<graphene.model.idl.G_Property> value) {
      validate(fields()[21], value);
      this.properties = value;
      fieldSetFlags()[21] = true;
      return this; 
    }
    
    /** Checks whether the 'properties' field has been set */
    public boolean hasProperties() {
      return fieldSetFlags()[21];
    }
    
    /** Clears the value of the 'properties' field */
    public graphene.model.idl.G_Node.Builder clearProperties() {
      properties = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    @Override
    public G_Node build() {
      try {
        G_Node record = new G_Node();
        record.dataSet = fieldSetFlags()[0] ? this.dataSet : (java.util.List<java.util.Map<java.lang.String,java.lang.String>>) defaultValue(fields()[0]);
        record.edited = fieldSetFlags()[1] ? this.edited : (java.lang.Boolean) defaultValue(fields()[1]);
        record.id = fieldSetFlags()[2] ? this.id : (java.lang.String) defaultValue(fields()[2]);
        record.idType = fieldSetFlags()[3] ? this.idType : (java.lang.String) defaultValue(fields()[3]);
        record.idVal = fieldSetFlags()[4] ? this.idVal : (java.lang.String) defaultValue(fields()[4]);
        record.label = fieldSetFlags()[5] ? this.label : (java.lang.String) defaultValue(fields()[5]);
        record.color = fieldSetFlags()[6] ? this.color : (java.lang.String) defaultValue(fields()[6]);
        record.degree = fieldSetFlags()[7] ? this.degree : (java.lang.Integer) defaultValue(fields()[7]);
        record.isCluster = fieldSetFlags()[8] ? this.isCluster : (java.lang.Boolean) defaultValue(fields()[8]);
        record.isUsed = fieldSetFlags()[9] ? this.isUsed : (java.lang.Boolean) defaultValue(fields()[9]);
        record.minScore = fieldSetFlags()[10] ? this.minScore : (java.lang.Double) defaultValue(fields()[10]);
        record.nbrLinks = fieldSetFlags()[11] ? this.nbrLinks : (java.lang.Integer) defaultValue(fields()[11]);
        record.priority = fieldSetFlags()[12] ? this.priority : (java.lang.Double) defaultValue(fields()[12]);
        record.scanned = fieldSetFlags()[13] ? this.scanned : (java.lang.Boolean) defaultValue(fields()[13]);
        record.size = fieldSetFlags()[14] ? this.size : (java.lang.Integer) defaultValue(fields()[14]);
        record.traversed = fieldSetFlags()[15] ? this.traversed : (java.lang.Boolean) defaultValue(fields()[15]);
        record.isLeaf = fieldSetFlags()[16] ? this.isLeaf : (java.lang.Boolean) defaultValue(fields()[16]);
        record.isOrigin = fieldSetFlags()[17] ? this.isOrigin : (java.lang.Boolean) defaultValue(fields()[17]);
        record.nodeType = fieldSetFlags()[18] ? this.nodeType : (java.lang.String) defaultValue(fields()[18]);
        record.nodes = fieldSetFlags()[19] ? this.nodes : (java.util.List<graphene.model.idl.G_Entity>) defaultValue(fields()[19]);
        record.edges = fieldSetFlags()[20] ? this.edges : (java.util.List<graphene.model.idl.G_Link>) defaultValue(fields()[20]);
        record.properties = fieldSetFlags()[21] ? this.properties : (java.util.List<graphene.model.idl.G_Property>) defaultValue(fields()[21]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
