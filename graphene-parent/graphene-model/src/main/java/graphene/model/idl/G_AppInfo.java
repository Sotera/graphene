/*
 *
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *       http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package graphene.model.idl;  
@SuppressWarnings("all")
/** * Selectable services, returned by getAppInfo() in various meta APIs */
@org.apache.avro.specific.AvroGenerated
public class G_AppInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"G_AppInfo\",\"namespace\":\"graphene.model.idl\",\"doc\":\"* Selectable services, returned by getAppInfo() in various meta APIs\",\"fields\":[{\"name\":\"appName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"unique id of this application\"},{\"name\":\"appVersion\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"version of this application\"},{\"name\":\"serverTime\",\"type\":\"long\",\"doc\":\"version of this application\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** unique id of this application */
   private java.lang.String appName;
  /** version of this application */
   private java.lang.String appVersion;
  /** version of this application */
   private long serverTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public G_AppInfo() {}

  /**
   * All-args constructor.
   */
  public G_AppInfo(java.lang.String appName, java.lang.String appVersion, java.lang.Long serverTime) {
    this.appName = appName;
    this.appVersion = appVersion;
    this.serverTime = serverTime;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return appName;
    case 1: return appVersion;
    case 2: return serverTime;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: appName = (java.lang.String)value$; break;
    case 1: appVersion = (java.lang.String)value$; break;
    case 2: serverTime = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'appName' field.
   * unique id of this application   */
  public java.lang.String getAppName() {
    return appName;
  }

  /**
   * Sets the value of the 'appName' field.
   * unique id of this application   * @param value the value to set.
   */
  public void setAppName(java.lang.String value) {
    this.appName = value;
  }

  /**
   * Gets the value of the 'appVersion' field.
   * version of this application   */
  public java.lang.String getAppVersion() {
    return appVersion;
  }

  /**
   * Sets the value of the 'appVersion' field.
   * version of this application   * @param value the value to set.
   */
  public void setAppVersion(java.lang.String value) {
    this.appVersion = value;
  }

  /**
   * Gets the value of the 'serverTime' field.
   * version of this application   */
  public java.lang.Long getServerTime() {
    return serverTime;
  }

  /**
   * Sets the value of the 'serverTime' field.
   * version of this application   * @param value the value to set.
   */
  public void setServerTime(java.lang.Long value) {
    this.serverTime = value;
  }

  /** Creates a new G_AppInfo RecordBuilder */
  public static graphene.model.idl.G_AppInfo.Builder newBuilder() {
    return new graphene.model.idl.G_AppInfo.Builder();
  }
  
  /** Creates a new G_AppInfo RecordBuilder by copying an existing Builder */
  public static graphene.model.idl.G_AppInfo.Builder newBuilder(graphene.model.idl.G_AppInfo.Builder other) {
    return new graphene.model.idl.G_AppInfo.Builder(other);
  }
  
  /** Creates a new G_AppInfo RecordBuilder by copying an existing G_AppInfo instance */
  public static graphene.model.idl.G_AppInfo.Builder newBuilder(graphene.model.idl.G_AppInfo other) {
    return new graphene.model.idl.G_AppInfo.Builder(other);
  }
  
  /**
   * RecordBuilder for G_AppInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<G_AppInfo>
    implements org.apache.avro.data.RecordBuilder<G_AppInfo> {

    private java.lang.String appName;
    private java.lang.String appVersion;
    private long serverTime;

    /** Creates a new Builder */
    private Builder() {
      super(graphene.model.idl.G_AppInfo.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(graphene.model.idl.G_AppInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.appName)) {
        this.appName = data().deepCopy(fields()[0].schema(), other.appName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.appVersion)) {
        this.appVersion = data().deepCopy(fields()[1].schema(), other.appVersion);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.serverTime)) {
        this.serverTime = data().deepCopy(fields()[2].schema(), other.serverTime);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing G_AppInfo instance */
    private Builder(graphene.model.idl.G_AppInfo other) {
            super(graphene.model.idl.G_AppInfo.SCHEMA$);
      if (isValidValue(fields()[0], other.appName)) {
        this.appName = data().deepCopy(fields()[0].schema(), other.appName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.appVersion)) {
        this.appVersion = data().deepCopy(fields()[1].schema(), other.appVersion);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.serverTime)) {
        this.serverTime = data().deepCopy(fields()[2].schema(), other.serverTime);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'appName' field */
    public java.lang.String getAppName() {
      return appName;
    }
    
    /** Sets the value of the 'appName' field */
    public graphene.model.idl.G_AppInfo.Builder setAppName(java.lang.String value) {
      validate(fields()[0], value);
      this.appName = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'appName' field has been set */
    public boolean hasAppName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'appName' field */
    public graphene.model.idl.G_AppInfo.Builder clearAppName() {
      appName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'appVersion' field */
    public java.lang.String getAppVersion() {
      return appVersion;
    }
    
    /** Sets the value of the 'appVersion' field */
    public graphene.model.idl.G_AppInfo.Builder setAppVersion(java.lang.String value) {
      validate(fields()[1], value);
      this.appVersion = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'appVersion' field has been set */
    public boolean hasAppVersion() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'appVersion' field */
    public graphene.model.idl.G_AppInfo.Builder clearAppVersion() {
      appVersion = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'serverTime' field */
    public java.lang.Long getServerTime() {
      return serverTime;
    }
    
    /** Sets the value of the 'serverTime' field */
    public graphene.model.idl.G_AppInfo.Builder setServerTime(long value) {
      validate(fields()[2], value);
      this.serverTime = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'serverTime' field has been set */
    public boolean hasServerTime() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'serverTime' field */
    public graphene.model.idl.G_AppInfo.Builder clearServerTime() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public G_AppInfo build() {
      try {
        G_AppInfo record = new G_AppInfo();
        record.appName = fieldSetFlags()[0] ? this.appName : (java.lang.String) defaultValue(fields()[0]);
        record.appVersion = fieldSetFlags()[1] ? this.appVersion : (java.lang.String) defaultValue(fields()[1]);
        record.serverTime = fieldSetFlags()[2] ? this.serverTime : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
