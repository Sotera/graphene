/*
 *
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *       http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package graphene.model.idl;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class G_Edge extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"G_Edge\",\"namespace\":\"graphene.model.idl\",\"fields\":[{\"name\":\"dataSet\",\"type\":[{\"type\":\"array\",\"items\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}},\"null\"]},{\"name\":\"color\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"default\":\"#23A4FF\"},{\"name\":\"count\",\"type\":\"int\",\"default\":1},{\"name\":\"day\",\"type\":\"int\",\"default\":-1},{\"name\":\"degree\",\"type\":\"int\",\"default\":0},{\"name\":\"directed\",\"type\":\"boolean\",\"default\":false},{\"name\":\"edges\",\"type\":[{\"type\":\"array\",\"items\":\"G_Edge\"},\"null\"]},{\"name\":\"edited\",\"type\":\"boolean\",\"default\":false},{\"name\":\"expanded\",\"type\":\"boolean\",\"default\":false},{\"name\":\"idType\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"idVal\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"label\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"lineStyle\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"default\":\"solid\"},{\"name\":\"month\",\"type\":\"int\",\"default\":-1},{\"name\":\"sourceId\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"default\":\"src\"},{\"name\":\"targetId\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"default\":\"target\"},{\"name\":\"value\",\"type\":\"double\",\"default\":0},{\"name\":\"weight\",\"type\":\"int\",\"default\":1},{\"name\":\"year\",\"type\":\"int\",\"default\":-1}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.util.List<java.util.Map<java.lang.String,java.lang.String>> dataSet;
   private java.lang.String color;
   private int count;
   private int day;
   private int degree;
   private boolean directed;
   private java.util.List<graphene.model.idl.G_Edge> edges;
   private boolean edited;
   private boolean expanded;
   private java.lang.String idType;
   private java.lang.String idVal;
   private java.lang.String label;
   private java.lang.String lineStyle;
   private int month;
   private java.lang.String sourceId;
   private java.lang.String targetId;
   private double value;
   private int weight;
   private int year;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public G_Edge() {}

  /**
   * All-args constructor.
   */
  public G_Edge(java.util.List<java.util.Map<java.lang.String,java.lang.String>> dataSet, java.lang.String color, java.lang.Integer count, java.lang.Integer day, java.lang.Integer degree, java.lang.Boolean directed, java.util.List<graphene.model.idl.G_Edge> edges, java.lang.Boolean edited, java.lang.Boolean expanded, java.lang.String idType, java.lang.String idVal, java.lang.String label, java.lang.String lineStyle, java.lang.Integer month, java.lang.String sourceId, java.lang.String targetId, java.lang.Double value, java.lang.Integer weight, java.lang.Integer year) {
    this.dataSet = dataSet;
    this.color = color;
    this.count = count;
    this.day = day;
    this.degree = degree;
    this.directed = directed;
    this.edges = edges;
    this.edited = edited;
    this.expanded = expanded;
    this.idType = idType;
    this.idVal = idVal;
    this.label = label;
    this.lineStyle = lineStyle;
    this.month = month;
    this.sourceId = sourceId;
    this.targetId = targetId;
    this.value = value;
    this.weight = weight;
    this.year = year;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return dataSet;
    case 1: return color;
    case 2: return count;
    case 3: return day;
    case 4: return degree;
    case 5: return directed;
    case 6: return edges;
    case 7: return edited;
    case 8: return expanded;
    case 9: return idType;
    case 10: return idVal;
    case 11: return label;
    case 12: return lineStyle;
    case 13: return month;
    case 14: return sourceId;
    case 15: return targetId;
    case 16: return value;
    case 17: return weight;
    case 18: return year;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: dataSet = (java.util.List<java.util.Map<java.lang.String,java.lang.String>>)value$; break;
    case 1: color = (java.lang.String)value$; break;
    case 2: count = (java.lang.Integer)value$; break;
    case 3: day = (java.lang.Integer)value$; break;
    case 4: degree = (java.lang.Integer)value$; break;
    case 5: directed = (java.lang.Boolean)value$; break;
    case 6: edges = (java.util.List<graphene.model.idl.G_Edge>)value$; break;
    case 7: edited = (java.lang.Boolean)value$; break;
    case 8: expanded = (java.lang.Boolean)value$; break;
    case 9: idType = (java.lang.String)value$; break;
    case 10: idVal = (java.lang.String)value$; break;
    case 11: label = (java.lang.String)value$; break;
    case 12: lineStyle = (java.lang.String)value$; break;
    case 13: month = (java.lang.Integer)value$; break;
    case 14: sourceId = (java.lang.String)value$; break;
    case 15: targetId = (java.lang.String)value$; break;
    case 16: value = (java.lang.Double)value$; break;
    case 17: weight = (java.lang.Integer)value$; break;
    case 18: year = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'dataSet' field.
   */
  public java.util.List<java.util.Map<java.lang.String,java.lang.String>> getDataSet() {
    return dataSet;
  }

  /**
   * Sets the value of the 'dataSet' field.
   * @param value the value to set.
   */
  public void setDataSet(java.util.List<java.util.Map<java.lang.String,java.lang.String>> value) {
    this.dataSet = value;
  }

  /**
   * Gets the value of the 'color' field.
   */
  public java.lang.String getColor() {
    return color;
  }

  /**
   * Sets the value of the 'color' field.
   * @param value the value to set.
   */
  public void setColor(java.lang.String value) {
    this.color = value;
  }

  /**
   * Gets the value of the 'count' field.
   */
  public java.lang.Integer getCount() {
    return count;
  }

  /**
   * Sets the value of the 'count' field.
   * @param value the value to set.
   */
  public void setCount(java.lang.Integer value) {
    this.count = value;
  }

  /**
   * Gets the value of the 'day' field.
   */
  public java.lang.Integer getDay() {
    return day;
  }

  /**
   * Sets the value of the 'day' field.
   * @param value the value to set.
   */
  public void setDay(java.lang.Integer value) {
    this.day = value;
  }

  /**
   * Gets the value of the 'degree' field.
   */
  public java.lang.Integer getDegree() {
    return degree;
  }

  /**
   * Sets the value of the 'degree' field.
   * @param value the value to set.
   */
  public void setDegree(java.lang.Integer value) {
    this.degree = value;
  }

  /**
   * Gets the value of the 'directed' field.
   */
  public java.lang.Boolean getDirected() {
    return directed;
  }

  /**
   * Sets the value of the 'directed' field.
   * @param value the value to set.
   */
  public void setDirected(java.lang.Boolean value) {
    this.directed = value;
  }

  /**
   * Gets the value of the 'edges' field.
   */
  public java.util.List<graphene.model.idl.G_Edge> getEdges() {
    return edges;
  }

  /**
   * Sets the value of the 'edges' field.
   * @param value the value to set.
   */
  public void setEdges(java.util.List<graphene.model.idl.G_Edge> value) {
    this.edges = value;
  }

  /**
   * Gets the value of the 'edited' field.
   */
  public java.lang.Boolean getEdited() {
    return edited;
  }

  /**
   * Sets the value of the 'edited' field.
   * @param value the value to set.
   */
  public void setEdited(java.lang.Boolean value) {
    this.edited = value;
  }

  /**
   * Gets the value of the 'expanded' field.
   */
  public java.lang.Boolean getExpanded() {
    return expanded;
  }

  /**
   * Sets the value of the 'expanded' field.
   * @param value the value to set.
   */
  public void setExpanded(java.lang.Boolean value) {
    this.expanded = value;
  }

  /**
   * Gets the value of the 'idType' field.
   */
  public java.lang.String getIdType() {
    return idType;
  }

  /**
   * Sets the value of the 'idType' field.
   * @param value the value to set.
   */
  public void setIdType(java.lang.String value) {
    this.idType = value;
  }

  /**
   * Gets the value of the 'idVal' field.
   */
  public java.lang.String getIdVal() {
    return idVal;
  }

  /**
   * Sets the value of the 'idVal' field.
   * @param value the value to set.
   */
  public void setIdVal(java.lang.String value) {
    this.idVal = value;
  }

  /**
   * Gets the value of the 'label' field.
   */
  public java.lang.String getLabel() {
    return label;
  }

  /**
   * Sets the value of the 'label' field.
   * @param value the value to set.
   */
  public void setLabel(java.lang.String value) {
    this.label = value;
  }

  /**
   * Gets the value of the 'lineStyle' field.
   */
  public java.lang.String getLineStyle() {
    return lineStyle;
  }

  /**
   * Sets the value of the 'lineStyle' field.
   * @param value the value to set.
   */
  public void setLineStyle(java.lang.String value) {
    this.lineStyle = value;
  }

  /**
   * Gets the value of the 'month' field.
   */
  public java.lang.Integer getMonth() {
    return month;
  }

  /**
   * Sets the value of the 'month' field.
   * @param value the value to set.
   */
  public void setMonth(java.lang.Integer value) {
    this.month = value;
  }

  /**
   * Gets the value of the 'sourceId' field.
   */
  public java.lang.String getSourceId() {
    return sourceId;
  }

  /**
   * Sets the value of the 'sourceId' field.
   * @param value the value to set.
   */
  public void setSourceId(java.lang.String value) {
    this.sourceId = value;
  }

  /**
   * Gets the value of the 'targetId' field.
   */
  public java.lang.String getTargetId() {
    return targetId;
  }

  /**
   * Sets the value of the 'targetId' field.
   * @param value the value to set.
   */
  public void setTargetId(java.lang.String value) {
    this.targetId = value;
  }

  /**
   * Gets the value of the 'value' field.
   */
  public java.lang.Double getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.lang.Double value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'weight' field.
   */
  public java.lang.Integer getWeight() {
    return weight;
  }

  /**
   * Sets the value of the 'weight' field.
   * @param value the value to set.
   */
  public void setWeight(java.lang.Integer value) {
    this.weight = value;
  }

  /**
   * Gets the value of the 'year' field.
   */
  public java.lang.Integer getYear() {
    return year;
  }

  /**
   * Sets the value of the 'year' field.
   * @param value the value to set.
   */
  public void setYear(java.lang.Integer value) {
    this.year = value;
  }

  /** Creates a new G_Edge RecordBuilder */
  public static graphene.model.idl.G_Edge.Builder newBuilder() {
    return new graphene.model.idl.G_Edge.Builder();
  }
  
  /** Creates a new G_Edge RecordBuilder by copying an existing Builder */
  public static graphene.model.idl.G_Edge.Builder newBuilder(graphene.model.idl.G_Edge.Builder other) {
    return new graphene.model.idl.G_Edge.Builder(other);
  }
  
  /** Creates a new G_Edge RecordBuilder by copying an existing G_Edge instance */
  public static graphene.model.idl.G_Edge.Builder newBuilder(graphene.model.idl.G_Edge other) {
    return new graphene.model.idl.G_Edge.Builder(other);
  }
  
  /**
   * RecordBuilder for G_Edge instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<G_Edge>
    implements org.apache.avro.data.RecordBuilder<G_Edge> {

    private java.util.List<java.util.Map<java.lang.String,java.lang.String>> dataSet;
    private java.lang.String color;
    private int count;
    private int day;
    private int degree;
    private boolean directed;
    private java.util.List<graphene.model.idl.G_Edge> edges;
    private boolean edited;
    private boolean expanded;
    private java.lang.String idType;
    private java.lang.String idVal;
    private java.lang.String label;
    private java.lang.String lineStyle;
    private int month;
    private java.lang.String sourceId;
    private java.lang.String targetId;
    private double value;
    private int weight;
    private int year;

    /** Creates a new Builder */
    private Builder() {
      super(graphene.model.idl.G_Edge.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(graphene.model.idl.G_Edge.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.dataSet)) {
        this.dataSet = data().deepCopy(fields()[0].schema(), other.dataSet);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.color)) {
        this.color = data().deepCopy(fields()[1].schema(), other.color);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.count)) {
        this.count = data().deepCopy(fields()[2].schema(), other.count);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.day)) {
        this.day = data().deepCopy(fields()[3].schema(), other.day);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.degree)) {
        this.degree = data().deepCopy(fields()[4].schema(), other.degree);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.directed)) {
        this.directed = data().deepCopy(fields()[5].schema(), other.directed);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.edges)) {
        this.edges = data().deepCopy(fields()[6].schema(), other.edges);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.edited)) {
        this.edited = data().deepCopy(fields()[7].schema(), other.edited);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.expanded)) {
        this.expanded = data().deepCopy(fields()[8].schema(), other.expanded);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.idType)) {
        this.idType = data().deepCopy(fields()[9].schema(), other.idType);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.idVal)) {
        this.idVal = data().deepCopy(fields()[10].schema(), other.idVal);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.label)) {
        this.label = data().deepCopy(fields()[11].schema(), other.label);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.lineStyle)) {
        this.lineStyle = data().deepCopy(fields()[12].schema(), other.lineStyle);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.month)) {
        this.month = data().deepCopy(fields()[13].schema(), other.month);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.sourceId)) {
        this.sourceId = data().deepCopy(fields()[14].schema(), other.sourceId);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.targetId)) {
        this.targetId = data().deepCopy(fields()[15].schema(), other.targetId);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.value)) {
        this.value = data().deepCopy(fields()[16].schema(), other.value);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.weight)) {
        this.weight = data().deepCopy(fields()[17].schema(), other.weight);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.year)) {
        this.year = data().deepCopy(fields()[18].schema(), other.year);
        fieldSetFlags()[18] = true;
      }
    }
    
    /** Creates a Builder by copying an existing G_Edge instance */
    private Builder(graphene.model.idl.G_Edge other) {
            super(graphene.model.idl.G_Edge.SCHEMA$);
      if (isValidValue(fields()[0], other.dataSet)) {
        this.dataSet = data().deepCopy(fields()[0].schema(), other.dataSet);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.color)) {
        this.color = data().deepCopy(fields()[1].schema(), other.color);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.count)) {
        this.count = data().deepCopy(fields()[2].schema(), other.count);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.day)) {
        this.day = data().deepCopy(fields()[3].schema(), other.day);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.degree)) {
        this.degree = data().deepCopy(fields()[4].schema(), other.degree);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.directed)) {
        this.directed = data().deepCopy(fields()[5].schema(), other.directed);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.edges)) {
        this.edges = data().deepCopy(fields()[6].schema(), other.edges);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.edited)) {
        this.edited = data().deepCopy(fields()[7].schema(), other.edited);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.expanded)) {
        this.expanded = data().deepCopy(fields()[8].schema(), other.expanded);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.idType)) {
        this.idType = data().deepCopy(fields()[9].schema(), other.idType);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.idVal)) {
        this.idVal = data().deepCopy(fields()[10].schema(), other.idVal);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.label)) {
        this.label = data().deepCopy(fields()[11].schema(), other.label);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.lineStyle)) {
        this.lineStyle = data().deepCopy(fields()[12].schema(), other.lineStyle);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.month)) {
        this.month = data().deepCopy(fields()[13].schema(), other.month);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.sourceId)) {
        this.sourceId = data().deepCopy(fields()[14].schema(), other.sourceId);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.targetId)) {
        this.targetId = data().deepCopy(fields()[15].schema(), other.targetId);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.value)) {
        this.value = data().deepCopy(fields()[16].schema(), other.value);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.weight)) {
        this.weight = data().deepCopy(fields()[17].schema(), other.weight);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.year)) {
        this.year = data().deepCopy(fields()[18].schema(), other.year);
        fieldSetFlags()[18] = true;
      }
    }

    /** Gets the value of the 'dataSet' field */
    public java.util.List<java.util.Map<java.lang.String,java.lang.String>> getDataSet() {
      return dataSet;
    }
    
    /** Sets the value of the 'dataSet' field */
    public graphene.model.idl.G_Edge.Builder setDataSet(java.util.List<java.util.Map<java.lang.String,java.lang.String>> value) {
      validate(fields()[0], value);
      this.dataSet = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'dataSet' field has been set */
    public boolean hasDataSet() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'dataSet' field */
    public graphene.model.idl.G_Edge.Builder clearDataSet() {
      dataSet = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'color' field */
    public java.lang.String getColor() {
      return color;
    }
    
    /** Sets the value of the 'color' field */
    public graphene.model.idl.G_Edge.Builder setColor(java.lang.String value) {
      validate(fields()[1], value);
      this.color = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'color' field has been set */
    public boolean hasColor() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'color' field */
    public graphene.model.idl.G_Edge.Builder clearColor() {
      color = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'count' field */
    public java.lang.Integer getCount() {
      return count;
    }
    
    /** Sets the value of the 'count' field */
    public graphene.model.idl.G_Edge.Builder setCount(int value) {
      validate(fields()[2], value);
      this.count = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'count' field has been set */
    public boolean hasCount() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'count' field */
    public graphene.model.idl.G_Edge.Builder clearCount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'day' field */
    public java.lang.Integer getDay() {
      return day;
    }
    
    /** Sets the value of the 'day' field */
    public graphene.model.idl.G_Edge.Builder setDay(int value) {
      validate(fields()[3], value);
      this.day = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'day' field has been set */
    public boolean hasDay() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'day' field */
    public graphene.model.idl.G_Edge.Builder clearDay() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'degree' field */
    public java.lang.Integer getDegree() {
      return degree;
    }
    
    /** Sets the value of the 'degree' field */
    public graphene.model.idl.G_Edge.Builder setDegree(int value) {
      validate(fields()[4], value);
      this.degree = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'degree' field has been set */
    public boolean hasDegree() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'degree' field */
    public graphene.model.idl.G_Edge.Builder clearDegree() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'directed' field */
    public java.lang.Boolean getDirected() {
      return directed;
    }
    
    /** Sets the value of the 'directed' field */
    public graphene.model.idl.G_Edge.Builder setDirected(boolean value) {
      validate(fields()[5], value);
      this.directed = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'directed' field has been set */
    public boolean hasDirected() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'directed' field */
    public graphene.model.idl.G_Edge.Builder clearDirected() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'edges' field */
    public java.util.List<graphene.model.idl.G_Edge> getEdges() {
      return edges;
    }
    
    /** Sets the value of the 'edges' field */
    public graphene.model.idl.G_Edge.Builder setEdges(java.util.List<graphene.model.idl.G_Edge> value) {
      validate(fields()[6], value);
      this.edges = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'edges' field has been set */
    public boolean hasEdges() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'edges' field */
    public graphene.model.idl.G_Edge.Builder clearEdges() {
      edges = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'edited' field */
    public java.lang.Boolean getEdited() {
      return edited;
    }
    
    /** Sets the value of the 'edited' field */
    public graphene.model.idl.G_Edge.Builder setEdited(boolean value) {
      validate(fields()[7], value);
      this.edited = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'edited' field has been set */
    public boolean hasEdited() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'edited' field */
    public graphene.model.idl.G_Edge.Builder clearEdited() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'expanded' field */
    public java.lang.Boolean getExpanded() {
      return expanded;
    }
    
    /** Sets the value of the 'expanded' field */
    public graphene.model.idl.G_Edge.Builder setExpanded(boolean value) {
      validate(fields()[8], value);
      this.expanded = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'expanded' field has been set */
    public boolean hasExpanded() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'expanded' field */
    public graphene.model.idl.G_Edge.Builder clearExpanded() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'idType' field */
    public java.lang.String getIdType() {
      return idType;
    }
    
    /** Sets the value of the 'idType' field */
    public graphene.model.idl.G_Edge.Builder setIdType(java.lang.String value) {
      validate(fields()[9], value);
      this.idType = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'idType' field has been set */
    public boolean hasIdType() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'idType' field */
    public graphene.model.idl.G_Edge.Builder clearIdType() {
      idType = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'idVal' field */
    public java.lang.String getIdVal() {
      return idVal;
    }
    
    /** Sets the value of the 'idVal' field */
    public graphene.model.idl.G_Edge.Builder setIdVal(java.lang.String value) {
      validate(fields()[10], value);
      this.idVal = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'idVal' field has been set */
    public boolean hasIdVal() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'idVal' field */
    public graphene.model.idl.G_Edge.Builder clearIdVal() {
      idVal = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'label' field */
    public java.lang.String getLabel() {
      return label;
    }
    
    /** Sets the value of the 'label' field */
    public graphene.model.idl.G_Edge.Builder setLabel(java.lang.String value) {
      validate(fields()[11], value);
      this.label = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'label' field has been set */
    public boolean hasLabel() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'label' field */
    public graphene.model.idl.G_Edge.Builder clearLabel() {
      label = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'lineStyle' field */
    public java.lang.String getLineStyle() {
      return lineStyle;
    }
    
    /** Sets the value of the 'lineStyle' field */
    public graphene.model.idl.G_Edge.Builder setLineStyle(java.lang.String value) {
      validate(fields()[12], value);
      this.lineStyle = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'lineStyle' field has been set */
    public boolean hasLineStyle() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'lineStyle' field */
    public graphene.model.idl.G_Edge.Builder clearLineStyle() {
      lineStyle = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'month' field */
    public java.lang.Integer getMonth() {
      return month;
    }
    
    /** Sets the value of the 'month' field */
    public graphene.model.idl.G_Edge.Builder setMonth(int value) {
      validate(fields()[13], value);
      this.month = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'month' field has been set */
    public boolean hasMonth() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'month' field */
    public graphene.model.idl.G_Edge.Builder clearMonth() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /** Gets the value of the 'sourceId' field */
    public java.lang.String getSourceId() {
      return sourceId;
    }
    
    /** Sets the value of the 'sourceId' field */
    public graphene.model.idl.G_Edge.Builder setSourceId(java.lang.String value) {
      validate(fields()[14], value);
      this.sourceId = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'sourceId' field has been set */
    public boolean hasSourceId() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'sourceId' field */
    public graphene.model.idl.G_Edge.Builder clearSourceId() {
      sourceId = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /** Gets the value of the 'targetId' field */
    public java.lang.String getTargetId() {
      return targetId;
    }
    
    /** Sets the value of the 'targetId' field */
    public graphene.model.idl.G_Edge.Builder setTargetId(java.lang.String value) {
      validate(fields()[15], value);
      this.targetId = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'targetId' field has been set */
    public boolean hasTargetId() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'targetId' field */
    public graphene.model.idl.G_Edge.Builder clearTargetId() {
      targetId = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /** Gets the value of the 'value' field */
    public java.lang.Double getValue() {
      return value;
    }
    
    /** Sets the value of the 'value' field */
    public graphene.model.idl.G_Edge.Builder setValue(double value) {
      validate(fields()[16], value);
      this.value = value;
      fieldSetFlags()[16] = true;
      return this; 
    }
    
    /** Checks whether the 'value' field has been set */
    public boolean hasValue() {
      return fieldSetFlags()[16];
    }
    
    /** Clears the value of the 'value' field */
    public graphene.model.idl.G_Edge.Builder clearValue() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /** Gets the value of the 'weight' field */
    public java.lang.Integer getWeight() {
      return weight;
    }
    
    /** Sets the value of the 'weight' field */
    public graphene.model.idl.G_Edge.Builder setWeight(int value) {
      validate(fields()[17], value);
      this.weight = value;
      fieldSetFlags()[17] = true;
      return this; 
    }
    
    /** Checks whether the 'weight' field has been set */
    public boolean hasWeight() {
      return fieldSetFlags()[17];
    }
    
    /** Clears the value of the 'weight' field */
    public graphene.model.idl.G_Edge.Builder clearWeight() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /** Gets the value of the 'year' field */
    public java.lang.Integer getYear() {
      return year;
    }
    
    /** Sets the value of the 'year' field */
    public graphene.model.idl.G_Edge.Builder setYear(int value) {
      validate(fields()[18], value);
      this.year = value;
      fieldSetFlags()[18] = true;
      return this; 
    }
    
    /** Checks whether the 'year' field has been set */
    public boolean hasYear() {
      return fieldSetFlags()[18];
    }
    
    /** Clears the value of the 'year' field */
    public graphene.model.idl.G_Edge.Builder clearYear() {
      fieldSetFlags()[18] = false;
      return this;
    }

    @Override
    public G_Edge build() {
      try {
        G_Edge record = new G_Edge();
        record.dataSet = fieldSetFlags()[0] ? this.dataSet : (java.util.List<java.util.Map<java.lang.String,java.lang.String>>) defaultValue(fields()[0]);
        record.color = fieldSetFlags()[1] ? this.color : (java.lang.String) defaultValue(fields()[1]);
        record.count = fieldSetFlags()[2] ? this.count : (java.lang.Integer) defaultValue(fields()[2]);
        record.day = fieldSetFlags()[3] ? this.day : (java.lang.Integer) defaultValue(fields()[3]);
        record.degree = fieldSetFlags()[4] ? this.degree : (java.lang.Integer) defaultValue(fields()[4]);
        record.directed = fieldSetFlags()[5] ? this.directed : (java.lang.Boolean) defaultValue(fields()[5]);
        record.edges = fieldSetFlags()[6] ? this.edges : (java.util.List<graphene.model.idl.G_Edge>) defaultValue(fields()[6]);
        record.edited = fieldSetFlags()[7] ? this.edited : (java.lang.Boolean) defaultValue(fields()[7]);
        record.expanded = fieldSetFlags()[8] ? this.expanded : (java.lang.Boolean) defaultValue(fields()[8]);
        record.idType = fieldSetFlags()[9] ? this.idType : (java.lang.String) defaultValue(fields()[9]);
        record.idVal = fieldSetFlags()[10] ? this.idVal : (java.lang.String) defaultValue(fields()[10]);
        record.label = fieldSetFlags()[11] ? this.label : (java.lang.String) defaultValue(fields()[11]);
        record.lineStyle = fieldSetFlags()[12] ? this.lineStyle : (java.lang.String) defaultValue(fields()[12]);
        record.month = fieldSetFlags()[13] ? this.month : (java.lang.Integer) defaultValue(fields()[13]);
        record.sourceId = fieldSetFlags()[14] ? this.sourceId : (java.lang.String) defaultValue(fields()[14]);
        record.targetId = fieldSetFlags()[15] ? this.targetId : (java.lang.String) defaultValue(fields()[15]);
        record.value = fieldSetFlags()[16] ? this.value : (java.lang.Double) defaultValue(fields()[16]);
        record.weight = fieldSetFlags()[17] ? this.weight : (java.lang.Integer) defaultValue(fields()[17]);
        record.year = fieldSetFlags()[18] ? this.year : (java.lang.Integer) defaultValue(fields()[18]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
