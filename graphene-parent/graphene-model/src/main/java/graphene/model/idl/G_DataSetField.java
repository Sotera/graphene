/*
 *
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *       http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package graphene.model.idl;  
@SuppressWarnings("all")
/** * A field within a DataSet, which in turn is a real or virtual table within
	 * a DataSource. From Non Avro version by PWG. */
@org.apache.avro.specific.AvroGenerated
public class G_DataSetField extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"G_DataSetField\",\"namespace\":\"graphene.model.idl\",\"doc\":\"* A field within a DataSet, which in turn is a real or virtual table within\\r\\n\\t * a DataSource. From Non Avro version by PWG.\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"name of the field\"},{\"name\":\"friendlyName\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"doc\":\"user-friendly short-text for key (displayable)\",\"default\":null},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"G_PropertyType\",\"doc\":\"* The 21st century meaning, \\\"conceal from unauthorized\\r\\n\\t\\t\\t\\t\\t\\t * view; censor but do not destroy\\\"\",\"symbols\":[\"DOUBLE\",\"LONG\",\"BOOLEAN\",\"STRING\",\"DATE\",\"GEO\",\"IMAGE\",\"URI\",\"OTHER\",\"REDACTED\"]},\"doc\":\"One of DOUBLE, LONG, BOOLEAN, STRING, DATE, GEO, OTHER\"},{\"name\":\"sortable\",\"type\":\"boolean\",\"default\":true},{\"name\":\"searchable\",\"type\":\"boolean\",\"default\":true},{\"name\":\"reportable\",\"type\":\"boolean\",\"default\":true}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** name of the field */
   private java.lang.String name;
  /** user-friendly short-text for key (displayable) */
   private java.lang.String friendlyName;
  /** One of DOUBLE, LONG, BOOLEAN, STRING, DATE, GEO, OTHER */
   private graphene.model.idl.G_PropertyType type;
   private boolean sortable;
   private boolean searchable;
   private boolean reportable;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public G_DataSetField() {}

  /**
   * All-args constructor.
   */
  public G_DataSetField(java.lang.String name, java.lang.String friendlyName, graphene.model.idl.G_PropertyType type, java.lang.Boolean sortable, java.lang.Boolean searchable, java.lang.Boolean reportable) {
    this.name = name;
    this.friendlyName = friendlyName;
    this.type = type;
    this.sortable = sortable;
    this.searchable = searchable;
    this.reportable = reportable;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return friendlyName;
    case 2: return type;
    case 3: return sortable;
    case 4: return searchable;
    case 5: return reportable;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.String)value$; break;
    case 1: friendlyName = (java.lang.String)value$; break;
    case 2: type = (graphene.model.idl.G_PropertyType)value$; break;
    case 3: sortable = (java.lang.Boolean)value$; break;
    case 4: searchable = (java.lang.Boolean)value$; break;
    case 5: reportable = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * name of the field   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * name of the field   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'friendlyName' field.
   * user-friendly short-text for key (displayable)   */
  public java.lang.String getFriendlyName() {
    return friendlyName;
  }

  /**
   * Sets the value of the 'friendlyName' field.
   * user-friendly short-text for key (displayable)   * @param value the value to set.
   */
  public void setFriendlyName(java.lang.String value) {
    this.friendlyName = value;
  }

  /**
   * Gets the value of the 'type' field.
   * One of DOUBLE, LONG, BOOLEAN, STRING, DATE, GEO, OTHER   */
  public graphene.model.idl.G_PropertyType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * One of DOUBLE, LONG, BOOLEAN, STRING, DATE, GEO, OTHER   * @param value the value to set.
   */
  public void setType(graphene.model.idl.G_PropertyType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'sortable' field.
   */
  public java.lang.Boolean getSortable() {
    return sortable;
  }

  /**
   * Sets the value of the 'sortable' field.
   * @param value the value to set.
   */
  public void setSortable(java.lang.Boolean value) {
    this.sortable = value;
  }

  /**
   * Gets the value of the 'searchable' field.
   */
  public java.lang.Boolean getSearchable() {
    return searchable;
  }

  /**
   * Sets the value of the 'searchable' field.
   * @param value the value to set.
   */
  public void setSearchable(java.lang.Boolean value) {
    this.searchable = value;
  }

  /**
   * Gets the value of the 'reportable' field.
   */
  public java.lang.Boolean getReportable() {
    return reportable;
  }

  /**
   * Sets the value of the 'reportable' field.
   * @param value the value to set.
   */
  public void setReportable(java.lang.Boolean value) {
    this.reportable = value;
  }

  /** Creates a new G_DataSetField RecordBuilder */
  public static graphene.model.idl.G_DataSetField.Builder newBuilder() {
    return new graphene.model.idl.G_DataSetField.Builder();
  }
  
  /** Creates a new G_DataSetField RecordBuilder by copying an existing Builder */
  public static graphene.model.idl.G_DataSetField.Builder newBuilder(graphene.model.idl.G_DataSetField.Builder other) {
    return new graphene.model.idl.G_DataSetField.Builder(other);
  }
  
  /** Creates a new G_DataSetField RecordBuilder by copying an existing G_DataSetField instance */
  public static graphene.model.idl.G_DataSetField.Builder newBuilder(graphene.model.idl.G_DataSetField other) {
    return new graphene.model.idl.G_DataSetField.Builder(other);
  }
  
  /**
   * RecordBuilder for G_DataSetField instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<G_DataSetField>
    implements org.apache.avro.data.RecordBuilder<G_DataSetField> {

    private java.lang.String name;
    private java.lang.String friendlyName;
    private graphene.model.idl.G_PropertyType type;
    private boolean sortable;
    private boolean searchable;
    private boolean reportable;

    /** Creates a new Builder */
    private Builder() {
      super(graphene.model.idl.G_DataSetField.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(graphene.model.idl.G_DataSetField.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.friendlyName)) {
        this.friendlyName = data().deepCopy(fields()[1].schema(), other.friendlyName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sortable)) {
        this.sortable = data().deepCopy(fields()[3].schema(), other.sortable);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.searchable)) {
        this.searchable = data().deepCopy(fields()[4].schema(), other.searchable);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.reportable)) {
        this.reportable = data().deepCopy(fields()[5].schema(), other.reportable);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing G_DataSetField instance */
    private Builder(graphene.model.idl.G_DataSetField other) {
            super(graphene.model.idl.G_DataSetField.SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.friendlyName)) {
        this.friendlyName = data().deepCopy(fields()[1].schema(), other.friendlyName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sortable)) {
        this.sortable = data().deepCopy(fields()[3].schema(), other.sortable);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.searchable)) {
        this.searchable = data().deepCopy(fields()[4].schema(), other.searchable);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.reportable)) {
        this.reportable = data().deepCopy(fields()[5].schema(), other.reportable);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'name' field */
    public java.lang.String getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public graphene.model.idl.G_DataSetField.Builder setName(java.lang.String value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'name' field */
    public graphene.model.idl.G_DataSetField.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'friendlyName' field */
    public java.lang.String getFriendlyName() {
      return friendlyName;
    }
    
    /** Sets the value of the 'friendlyName' field */
    public graphene.model.idl.G_DataSetField.Builder setFriendlyName(java.lang.String value) {
      validate(fields()[1], value);
      this.friendlyName = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'friendlyName' field has been set */
    public boolean hasFriendlyName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'friendlyName' field */
    public graphene.model.idl.G_DataSetField.Builder clearFriendlyName() {
      friendlyName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'type' field */
    public graphene.model.idl.G_PropertyType getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public graphene.model.idl.G_DataSetField.Builder setType(graphene.model.idl.G_PropertyType value) {
      validate(fields()[2], value);
      this.type = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'type' field */
    public graphene.model.idl.G_DataSetField.Builder clearType() {
      type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'sortable' field */
    public java.lang.Boolean getSortable() {
      return sortable;
    }
    
    /** Sets the value of the 'sortable' field */
    public graphene.model.idl.G_DataSetField.Builder setSortable(boolean value) {
      validate(fields()[3], value);
      this.sortable = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'sortable' field has been set */
    public boolean hasSortable() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'sortable' field */
    public graphene.model.idl.G_DataSetField.Builder clearSortable() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'searchable' field */
    public java.lang.Boolean getSearchable() {
      return searchable;
    }
    
    /** Sets the value of the 'searchable' field */
    public graphene.model.idl.G_DataSetField.Builder setSearchable(boolean value) {
      validate(fields()[4], value);
      this.searchable = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'searchable' field has been set */
    public boolean hasSearchable() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'searchable' field */
    public graphene.model.idl.G_DataSetField.Builder clearSearchable() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'reportable' field */
    public java.lang.Boolean getReportable() {
      return reportable;
    }
    
    /** Sets the value of the 'reportable' field */
    public graphene.model.idl.G_DataSetField.Builder setReportable(boolean value) {
      validate(fields()[5], value);
      this.reportable = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'reportable' field has been set */
    public boolean hasReportable() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'reportable' field */
    public graphene.model.idl.G_DataSetField.Builder clearReportable() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public G_DataSetField build() {
      try {
        G_DataSetField record = new G_DataSetField();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.String) defaultValue(fields()[0]);
        record.friendlyName = fieldSetFlags()[1] ? this.friendlyName : (java.lang.String) defaultValue(fields()[1]);
        record.type = fieldSetFlags()[2] ? this.type : (graphene.model.idl.G_PropertyType) defaultValue(fields()[2]);
        record.sortable = fieldSetFlags()[3] ? this.sortable : (java.lang.Boolean) defaultValue(fields()[3]);
        record.searchable = fieldSetFlags()[4] ? this.searchable : (java.lang.Boolean) defaultValue(fields()[4]);
        record.reportable = fieldSetFlags()[5] ? this.reportable : (java.lang.Boolean) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
