/*
 *
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *       http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package graphene.model.idl;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class G_LegendItem extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"G_LegendItem\",\"namespace\":\"graphene.model.idl\",\"fields\":[{\"name\":\"description\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"doc\":\"usually a longer explanation\"},{\"name\":\"style\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"doc\":\"the css style or hex color\"},{\"name\":\"label\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"the text that will be visible,REQUIRED\"},{\"name\":\"icon\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"doc\":\"the icon that will be visible\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** usually a longer explanation */
   private java.lang.String description;
  /** the css style or hex color */
   private java.lang.String style;
  /** the text that will be visible,REQUIRED */
   private java.lang.String label;
  /** the icon that will be visible */
   private java.lang.String icon;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public G_LegendItem() {}

  /**
   * All-args constructor.
   */
  public G_LegendItem(java.lang.String description, java.lang.String style, java.lang.String label, java.lang.String icon) {
    this.description = description;
    this.style = style;
    this.label = label;
    this.icon = icon;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return description;
    case 1: return style;
    case 2: return label;
    case 3: return icon;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: description = (java.lang.String)value$; break;
    case 1: style = (java.lang.String)value$; break;
    case 2: label = (java.lang.String)value$; break;
    case 3: icon = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'description' field.
   * usually a longer explanation   */
  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * usually a longer explanation   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'style' field.
   * the css style or hex color   */
  public java.lang.String getStyle() {
    return style;
  }

  /**
   * Sets the value of the 'style' field.
   * the css style or hex color   * @param value the value to set.
   */
  public void setStyle(java.lang.String value) {
    this.style = value;
  }

  /**
   * Gets the value of the 'label' field.
   * the text that will be visible,REQUIRED   */
  public java.lang.String getLabel() {
    return label;
  }

  /**
   * Sets the value of the 'label' field.
   * the text that will be visible,REQUIRED   * @param value the value to set.
   */
  public void setLabel(java.lang.String value) {
    this.label = value;
  }

  /**
   * Gets the value of the 'icon' field.
   * the icon that will be visible   */
  public java.lang.String getIcon() {
    return icon;
  }

  /**
   * Sets the value of the 'icon' field.
   * the icon that will be visible   * @param value the value to set.
   */
  public void setIcon(java.lang.String value) {
    this.icon = value;
  }

  /** Creates a new G_LegendItem RecordBuilder */
  public static graphene.model.idl.G_LegendItem.Builder newBuilder() {
    return new graphene.model.idl.G_LegendItem.Builder();
  }
  
  /** Creates a new G_LegendItem RecordBuilder by copying an existing Builder */
  public static graphene.model.idl.G_LegendItem.Builder newBuilder(graphene.model.idl.G_LegendItem.Builder other) {
    return new graphene.model.idl.G_LegendItem.Builder(other);
  }
  
  /** Creates a new G_LegendItem RecordBuilder by copying an existing G_LegendItem instance */
  public static graphene.model.idl.G_LegendItem.Builder newBuilder(graphene.model.idl.G_LegendItem other) {
    return new graphene.model.idl.G_LegendItem.Builder(other);
  }
  
  /**
   * RecordBuilder for G_LegendItem instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<G_LegendItem>
    implements org.apache.avro.data.RecordBuilder<G_LegendItem> {

    private java.lang.String description;
    private java.lang.String style;
    private java.lang.String label;
    private java.lang.String icon;

    /** Creates a new Builder */
    private Builder() {
      super(graphene.model.idl.G_LegendItem.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(graphene.model.idl.G_LegendItem.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.description)) {
        this.description = data().deepCopy(fields()[0].schema(), other.description);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.style)) {
        this.style = data().deepCopy(fields()[1].schema(), other.style);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.label)) {
        this.label = data().deepCopy(fields()[2].schema(), other.label);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.icon)) {
        this.icon = data().deepCopy(fields()[3].schema(), other.icon);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing G_LegendItem instance */
    private Builder(graphene.model.idl.G_LegendItem other) {
            super(graphene.model.idl.G_LegendItem.SCHEMA$);
      if (isValidValue(fields()[0], other.description)) {
        this.description = data().deepCopy(fields()[0].schema(), other.description);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.style)) {
        this.style = data().deepCopy(fields()[1].schema(), other.style);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.label)) {
        this.label = data().deepCopy(fields()[2].schema(), other.label);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.icon)) {
        this.icon = data().deepCopy(fields()[3].schema(), other.icon);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'description' field */
    public java.lang.String getDescription() {
      return description;
    }
    
    /** Sets the value of the 'description' field */
    public graphene.model.idl.G_LegendItem.Builder setDescription(java.lang.String value) {
      validate(fields()[0], value);
      this.description = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'description' field has been set */
    public boolean hasDescription() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'description' field */
    public graphene.model.idl.G_LegendItem.Builder clearDescription() {
      description = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'style' field */
    public java.lang.String getStyle() {
      return style;
    }
    
    /** Sets the value of the 'style' field */
    public graphene.model.idl.G_LegendItem.Builder setStyle(java.lang.String value) {
      validate(fields()[1], value);
      this.style = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'style' field has been set */
    public boolean hasStyle() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'style' field */
    public graphene.model.idl.G_LegendItem.Builder clearStyle() {
      style = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'label' field */
    public java.lang.String getLabel() {
      return label;
    }
    
    /** Sets the value of the 'label' field */
    public graphene.model.idl.G_LegendItem.Builder setLabel(java.lang.String value) {
      validate(fields()[2], value);
      this.label = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'label' field has been set */
    public boolean hasLabel() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'label' field */
    public graphene.model.idl.G_LegendItem.Builder clearLabel() {
      label = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'icon' field */
    public java.lang.String getIcon() {
      return icon;
    }
    
    /** Sets the value of the 'icon' field */
    public graphene.model.idl.G_LegendItem.Builder setIcon(java.lang.String value) {
      validate(fields()[3], value);
      this.icon = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'icon' field has been set */
    public boolean hasIcon() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'icon' field */
    public graphene.model.idl.G_LegendItem.Builder clearIcon() {
      icon = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public G_LegendItem build() {
      try {
        G_LegendItem record = new G_LegendItem();
        record.description = fieldSetFlags()[0] ? this.description : (java.lang.String) defaultValue(fields()[0]);
        record.style = fieldSetFlags()[1] ? this.style : (java.lang.String) defaultValue(fields()[1]);
        record.label = fieldSetFlags()[2] ? this.label : (java.lang.String) defaultValue(fields()[2]);
        record.icon = fieldSetFlags()[3] ? this.icon : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
