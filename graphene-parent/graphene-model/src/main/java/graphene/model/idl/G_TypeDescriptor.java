/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package graphene.model.idl;  
@SuppressWarnings("all")
/** Used to describe applicable types for a searchable property. Types may be grouped with the 'group' parameter.

		ADDED IN 1.8
	 * */
@org.apache.avro.specific.AvroGenerated
public class G_TypeDescriptor extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"G_TypeDescriptor\",\"namespace\":\"graphene.model.idl\",\"doc\":\"Used to describe applicable types for a searchable property. Types may be grouped with the 'group' parameter.\\n\\n\\t\\tADDED IN 1.8\\n\\t *\",\"fields\":[{\"name\":\"key\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"unique key of the type descriptor applicable to a property *\"},{\"name\":\"friendlyText\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"a human readable type name to display if the key isn't friendly (optional)\",\"default\":null},{\"name\":\"group\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Group name (optional) *\",\"default\":null},{\"name\":\"exclusive\",\"type\":\"boolean\",\"doc\":\"Indicates whether searching within the defined group is exclusive *\",\"default\":true}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** unique key of the type descriptor applicable to a property * */
   private java.lang.String key;
  /** a human readable type name to display if the key isn't friendly (optional) */
   private java.lang.String friendlyText;
  /** Group name (optional) * */
   private java.lang.String group;
  /** Indicates whether searching within the defined group is exclusive * */
   private boolean exclusive;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public G_TypeDescriptor() {}

  /**
   * All-args constructor.
   */
  public G_TypeDescriptor(java.lang.String key, java.lang.String friendlyText, java.lang.String group, java.lang.Boolean exclusive) {
    this.key = key;
    this.friendlyText = friendlyText;
    this.group = group;
    this.exclusive = exclusive;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return key;
    case 1: return friendlyText;
    case 2: return group;
    case 3: return exclusive;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: key = (java.lang.String)value$; break;
    case 1: friendlyText = (java.lang.String)value$; break;
    case 2: group = (java.lang.String)value$; break;
    case 3: exclusive = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'key' field.
   * unique key of the type descriptor applicable to a property *   */
  public java.lang.String getKey() {
    return key;
  }

  /**
   * Sets the value of the 'key' field.
   * unique key of the type descriptor applicable to a property *   * @param value the value to set.
   */
  public void setKey(java.lang.String value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'friendlyText' field.
   * a human readable type name to display if the key isn't friendly (optional)   */
  public java.lang.String getFriendlyText() {
    return friendlyText;
  }

  /**
   * Sets the value of the 'friendlyText' field.
   * a human readable type name to display if the key isn't friendly (optional)   * @param value the value to set.
   */
  public void setFriendlyText(java.lang.String value) {
    this.friendlyText = value;
  }

  /**
   * Gets the value of the 'group' field.
   * Group name (optional) *   */
  public java.lang.String getGroup() {
    return group;
  }

  /**
   * Sets the value of the 'group' field.
   * Group name (optional) *   * @param value the value to set.
   */
  public void setGroup(java.lang.String value) {
    this.group = value;
  }

  /**
   * Gets the value of the 'exclusive' field.
   * Indicates whether searching within the defined group is exclusive *   */
  public java.lang.Boolean getExclusive() {
    return exclusive;
  }

  /**
   * Sets the value of the 'exclusive' field.
   * Indicates whether searching within the defined group is exclusive *   * @param value the value to set.
   */
  public void setExclusive(java.lang.Boolean value) {
    this.exclusive = value;
  }

  /** Creates a new G_TypeDescriptor RecordBuilder */
  public static graphene.model.idl.G_TypeDescriptor.Builder newBuilder() {
    return new graphene.model.idl.G_TypeDescriptor.Builder();
  }
  
  /** Creates a new G_TypeDescriptor RecordBuilder by copying an existing Builder */
  public static graphene.model.idl.G_TypeDescriptor.Builder newBuilder(graphene.model.idl.G_TypeDescriptor.Builder other) {
    return new graphene.model.idl.G_TypeDescriptor.Builder(other);
  }
  
  /** Creates a new G_TypeDescriptor RecordBuilder by copying an existing G_TypeDescriptor instance */
  public static graphene.model.idl.G_TypeDescriptor.Builder newBuilder(graphene.model.idl.G_TypeDescriptor other) {
    return new graphene.model.idl.G_TypeDescriptor.Builder(other);
  }
  
  /**
   * RecordBuilder for G_TypeDescriptor instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<G_TypeDescriptor>
    implements org.apache.avro.data.RecordBuilder<G_TypeDescriptor> {

    private java.lang.String key;
    private java.lang.String friendlyText;
    private java.lang.String group;
    private boolean exclusive;

    /** Creates a new Builder */
    private Builder() {
      super(graphene.model.idl.G_TypeDescriptor.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(graphene.model.idl.G_TypeDescriptor.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.friendlyText)) {
        this.friendlyText = data().deepCopy(fields()[1].schema(), other.friendlyText);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.group)) {
        this.group = data().deepCopy(fields()[2].schema(), other.group);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.exclusive)) {
        this.exclusive = data().deepCopy(fields()[3].schema(), other.exclusive);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing G_TypeDescriptor instance */
    private Builder(graphene.model.idl.G_TypeDescriptor other) {
            super(graphene.model.idl.G_TypeDescriptor.SCHEMA$);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.friendlyText)) {
        this.friendlyText = data().deepCopy(fields()[1].schema(), other.friendlyText);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.group)) {
        this.group = data().deepCopy(fields()[2].schema(), other.group);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.exclusive)) {
        this.exclusive = data().deepCopy(fields()[3].schema(), other.exclusive);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'key' field */
    public java.lang.String getKey() {
      return key;
    }
    
    /** Sets the value of the 'key' field */
    public graphene.model.idl.G_TypeDescriptor.Builder setKey(java.lang.String value) {
      validate(fields()[0], value);
      this.key = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'key' field has been set */
    public boolean hasKey() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'key' field */
    public graphene.model.idl.G_TypeDescriptor.Builder clearKey() {
      key = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'friendlyText' field */
    public java.lang.String getFriendlyText() {
      return friendlyText;
    }
    
    /** Sets the value of the 'friendlyText' field */
    public graphene.model.idl.G_TypeDescriptor.Builder setFriendlyText(java.lang.String value) {
      validate(fields()[1], value);
      this.friendlyText = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'friendlyText' field has been set */
    public boolean hasFriendlyText() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'friendlyText' field */
    public graphene.model.idl.G_TypeDescriptor.Builder clearFriendlyText() {
      friendlyText = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'group' field */
    public java.lang.String getGroup() {
      return group;
    }
    
    /** Sets the value of the 'group' field */
    public graphene.model.idl.G_TypeDescriptor.Builder setGroup(java.lang.String value) {
      validate(fields()[2], value);
      this.group = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'group' field has been set */
    public boolean hasGroup() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'group' field */
    public graphene.model.idl.G_TypeDescriptor.Builder clearGroup() {
      group = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'exclusive' field */
    public java.lang.Boolean getExclusive() {
      return exclusive;
    }
    
    /** Sets the value of the 'exclusive' field */
    public graphene.model.idl.G_TypeDescriptor.Builder setExclusive(boolean value) {
      validate(fields()[3], value);
      this.exclusive = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'exclusive' field has been set */
    public boolean hasExclusive() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'exclusive' field */
    public graphene.model.idl.G_TypeDescriptor.Builder clearExclusive() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public G_TypeDescriptor build() {
      try {
        G_TypeDescriptor record = new G_TypeDescriptor();
        record.key = fieldSetFlags()[0] ? this.key : (java.lang.String) defaultValue(fields()[0]);
        record.friendlyText = fieldSetFlags()[1] ? this.friendlyText : (java.lang.String) defaultValue(fields()[1]);
        record.group = fieldSetFlags()[2] ? this.group : (java.lang.String) defaultValue(fields()[2]);
        record.exclusive = fieldSetFlags()[3] ? this.exclusive : (java.lang.Boolean) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
