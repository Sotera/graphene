/*
 *
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *       http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package graphene.model.idl;  
@SuppressWarnings("all")
/** Structured representation of geo-spatial data. */
@org.apache.avro.specific.AvroGenerated
public class G_GeoData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"G_GeoData\",\"namespace\":\"graphene.model.idl\",\"doc\":\"Structured representation of geo-spatial data.\",\"fields\":[{\"name\":\"text\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"an address or other place reference; unstructured text field\",\"default\":null},{\"name\":\"lat\",\"type\":[\"double\",\"null\"],\"doc\":\"latitude\",\"default\":null},{\"name\":\"lon\",\"type\":[\"double\",\"null\"],\"doc\":\"longitude\",\"default\":null},{\"name\":\"cc\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"ISO 3 digit country code\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** an address or other place reference; unstructured text field */
   private java.lang.String text;
  /** latitude */
   private java.lang.Double lat;
  /** longitude */
   private java.lang.Double lon;
  /** ISO 3 digit country code */
   private java.lang.String cc;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public G_GeoData() {}

  /**
   * All-args constructor.
   */
  public G_GeoData(java.lang.String text, java.lang.Double lat, java.lang.Double lon, java.lang.String cc) {
    this.text = text;
    this.lat = lat;
    this.lon = lon;
    this.cc = cc;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return text;
    case 1: return lat;
    case 2: return lon;
    case 3: return cc;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: text = (java.lang.String)value$; break;
    case 1: lat = (java.lang.Double)value$; break;
    case 2: lon = (java.lang.Double)value$; break;
    case 3: cc = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'text' field.
   * an address or other place reference; unstructured text field   */
  public java.lang.String getText() {
    return text;
  }

  /**
   * Sets the value of the 'text' field.
   * an address or other place reference; unstructured text field   * @param value the value to set.
   */
  public void setText(java.lang.String value) {
    this.text = value;
  }

  /**
   * Gets the value of the 'lat' field.
   * latitude   */
  public java.lang.Double getLat() {
    return lat;
  }

  /**
   * Sets the value of the 'lat' field.
   * latitude   * @param value the value to set.
   */
  public void setLat(java.lang.Double value) {
    this.lat = value;
  }

  /**
   * Gets the value of the 'lon' field.
   * longitude   */
  public java.lang.Double getLon() {
    return lon;
  }

  /**
   * Sets the value of the 'lon' field.
   * longitude   * @param value the value to set.
   */
  public void setLon(java.lang.Double value) {
    this.lon = value;
  }

  /**
   * Gets the value of the 'cc' field.
   * ISO 3 digit country code   */
  public java.lang.String getCc() {
    return cc;
  }

  /**
   * Sets the value of the 'cc' field.
   * ISO 3 digit country code   * @param value the value to set.
   */
  public void setCc(java.lang.String value) {
    this.cc = value;
  }

  /** Creates a new G_GeoData RecordBuilder */
  public static graphene.model.idl.G_GeoData.Builder newBuilder() {
    return new graphene.model.idl.G_GeoData.Builder();
  }
  
  /** Creates a new G_GeoData RecordBuilder by copying an existing Builder */
  public static graphene.model.idl.G_GeoData.Builder newBuilder(graphene.model.idl.G_GeoData.Builder other) {
    return new graphene.model.idl.G_GeoData.Builder(other);
  }
  
  /** Creates a new G_GeoData RecordBuilder by copying an existing G_GeoData instance */
  public static graphene.model.idl.G_GeoData.Builder newBuilder(graphene.model.idl.G_GeoData other) {
    return new graphene.model.idl.G_GeoData.Builder(other);
  }
  
  /**
   * RecordBuilder for G_GeoData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<G_GeoData>
    implements org.apache.avro.data.RecordBuilder<G_GeoData> {

    private java.lang.String text;
    private java.lang.Double lat;
    private java.lang.Double lon;
    private java.lang.String cc;

    /** Creates a new Builder */
    private Builder() {
      super(graphene.model.idl.G_GeoData.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(graphene.model.idl.G_GeoData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.text)) {
        this.text = data().deepCopy(fields()[0].schema(), other.text);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lat)) {
        this.lat = data().deepCopy(fields()[1].schema(), other.lat);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lon)) {
        this.lon = data().deepCopy(fields()[2].schema(), other.lon);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.cc)) {
        this.cc = data().deepCopy(fields()[3].schema(), other.cc);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing G_GeoData instance */
    private Builder(graphene.model.idl.G_GeoData other) {
            super(graphene.model.idl.G_GeoData.SCHEMA$);
      if (isValidValue(fields()[0], other.text)) {
        this.text = data().deepCopy(fields()[0].schema(), other.text);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lat)) {
        this.lat = data().deepCopy(fields()[1].schema(), other.lat);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lon)) {
        this.lon = data().deepCopy(fields()[2].schema(), other.lon);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.cc)) {
        this.cc = data().deepCopy(fields()[3].schema(), other.cc);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'text' field */
    public java.lang.String getText() {
      return text;
    }
    
    /** Sets the value of the 'text' field */
    public graphene.model.idl.G_GeoData.Builder setText(java.lang.String value) {
      validate(fields()[0], value);
      this.text = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'text' field has been set */
    public boolean hasText() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'text' field */
    public graphene.model.idl.G_GeoData.Builder clearText() {
      text = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'lat' field */
    public java.lang.Double getLat() {
      return lat;
    }
    
    /** Sets the value of the 'lat' field */
    public graphene.model.idl.G_GeoData.Builder setLat(java.lang.Double value) {
      validate(fields()[1], value);
      this.lat = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'lat' field has been set */
    public boolean hasLat() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'lat' field */
    public graphene.model.idl.G_GeoData.Builder clearLat() {
      lat = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'lon' field */
    public java.lang.Double getLon() {
      return lon;
    }
    
    /** Sets the value of the 'lon' field */
    public graphene.model.idl.G_GeoData.Builder setLon(java.lang.Double value) {
      validate(fields()[2], value);
      this.lon = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'lon' field has been set */
    public boolean hasLon() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'lon' field */
    public graphene.model.idl.G_GeoData.Builder clearLon() {
      lon = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'cc' field */
    public java.lang.String getCc() {
      return cc;
    }
    
    /** Sets the value of the 'cc' field */
    public graphene.model.idl.G_GeoData.Builder setCc(java.lang.String value) {
      validate(fields()[3], value);
      this.cc = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'cc' field has been set */
    public boolean hasCc() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'cc' field */
    public graphene.model.idl.G_GeoData.Builder clearCc() {
      cc = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public G_GeoData build() {
      try {
        G_GeoData record = new G_GeoData();
        record.text = fieldSetFlags()[0] ? this.text : (java.lang.String) defaultValue(fields()[0]);
        record.lat = fieldSetFlags()[1] ? this.lat : (java.lang.Double) defaultValue(fields()[1]);
        record.lon = fieldSetFlags()[2] ? this.lon : (java.lang.Double) defaultValue(fields()[2]);
        record.cc = fieldSetFlags()[3] ? this.cc : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
